<Window x:Class="TikzEdt.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:custom="clr-namespace:TikzEdt"
        xmlns:common="clr-namespace:Common"
        xmlns:avalonedit="http://icsharpcode.net/sharpdevelop/avalonedit" 
        xmlns:my="clr-namespace:TikzEdt"
        xmlns:mySnippets="clr-namespace:TikzEdt.Snippets"
        xmlns:p="clr-namespace:TikzEdt.Properties"
        xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase" 
        xmlns:extToolkit="clr-namespace:Microsoft.Windows.Controls;assembly=WPFToolkit.Extended"
        Title="TikzEdt" 
        Height="{Binding Source={x:Static p:Settings.Default}, Path=Window_Height, Mode=TwoWay}" 
        Width="{Binding Source={x:Static p:Settings.Default}, Path=Window_Width, Mode=TwoWay}" 
        Loaded="Window_Loaded" Closed="Window_Closed" Closing="Window_Closing" Icon="/TikzEdt;component/Images/tikzedt48.ico"
        xmlns:settings="clr-namespace:LogicaCMG.Settings"
        settings:WindowSettings.Save="True">
    <Window.Resources>
        <ItemsPanelTemplate x:Key="Virtualized">
            <VirtualizingStackPanel IsItemsHost="True"/>
        </ItemsPanelTemplate>
        <!--  <my:TheCompiler x:Key="TheCompiler2"/> -->
        <!-- El Cheapo hack to make images within disabled toolbar buttons appear 'grayed out'.  This doesn't
    gray them at all, but lowers their opacity so the (usually gray) background of the button shows through.
    If WPF had a built-in facility for grayscaling images in disabled buttons, this kind of icky kludgery wouldn't
    be necessary -->
        <Style TargetType="{x:Type Image}" x:Key="toolbarImageStyle">
            <Style.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Button}, AncestorLevel=1}, Path=IsEnabled}" Value="False">
                    <Setter Property="Opacity" Value="0.50"></Setter>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <!-- Note: If VS2010 tells you something like:
        "type my:InverseBooleanConverter was not found. verify that you are not missing an assembly"
        delete your obj directory within this project, then click the build button (F6) 
        (or Build->Clean, then Rebuild worked for me) -->
        <my:InverseBooleanConverter x:Key="BoolInverter" />
        <my:SeverityImageConverter x:Key="SeverityToImg"/>
        <BooleanToVisibilityConverter x:Key="boolToVis" />
        <my:InverseNullableBooleanConverter x:Key="NBoolInverter" />
        <my:BooleanToWidthConverter x:Key="BoolToWidth" />

        <CollectionViewSource x:Key="TexErrorsSource" Source="{Binding Source={x:Static my:MainWindow.TexErrors}}">
            <CollectionViewSource.SortDescriptions>
                <scm:SortDescription Direction="Descending" PropertyName="severity"/>
                <scm:SortDescription Direction="Ascending" PropertyName="SourceFileName"/>
                <scm:SortDescription Direction="Ascending" PropertyName="Line"/>
            </CollectionViewSource.SortDescriptions>
        </CollectionViewSource>
    </Window.Resources>
    <Window.CommandBindings>
        <CommandBinding Command="ApplicationCommands.Undo"
                    Executed="UndoCommandHandler"
                    CanExecute="UndoCanExecute"                       
                    />
        <CommandBinding Command="ApplicationCommands.Redo"
                    Executed="RedoCommandHandler"
                    CanExecute="RedoCanExecute"                       
                    />
        <CommandBinding Command="ApplicationCommands.Open"
                    Executed="OpenCommandHandler"
                    CanExecute="AlwaysTrue"                       
                    />
        <CommandBinding Command="ApplicationCommands.Save"
                    Executed="SaveCommandHandler"
                    CanExecute="AlwaysTrue"
                    />
        <CommandBinding Command="ApplicationCommands.SaveAs"
                    Executed="SaveAsCommandHandler"
                    CanExecute="AlwaysTrue"
                    />
        <CommandBinding Command="ApplicationCommands.New"
                    Executed="NewCommandHandler"
                    CanExecute="AlwaysTrue"
                    />
        <CommandBinding Command="ApplicationCommands.Close"
                    Executed="ExitCommandHandler"
                    CanExecute="AlwaysTrue"
                    />
        <CommandBinding Command="ApplicationCommands.Find"
                    Executed="FindCommandHandler"
                    CanExecute="AlwaysTrue"
                    />
        <CommandBinding Command="ApplicationCommands.Replace"
                    Executed="ReplaceCommandHandler"
                    CanExecute="AlwaysTrue"
                    />
        <CommandBinding Command="ApplicationCommands.Help"
                    Executed="HelpCommandHandler"
                    CanExecute="AlwaysTrue"
                    />
         <CommandBinding Command="NavigationCommands.DecreaseZoom"
                    Executed="ZoomoutCommandHandler"
                    CanExecute="AlwaysTrue"
                    />
        <CommandBinding Command="NavigationCommands.IncreaseZoom"
                    Executed="ZoominCommandHandler"
                    CanExecute="AlwaysTrue"
                    />
        <CommandBinding Command="{x:Static custom:MainWindow.ShowCodeCompletionsCommand}" 
                    Executed="ShowCodeCompletionsCommandHandler"
                    CanExecute="AlwaysTrue"
                    />
        <CommandBinding Command="{x:Static custom:MainWindow.FindNextCommand}" 
                    Executed="FindNextCommandHandler"
                    CanExecute="AlwaysTrue"
                    />
        <CommandBinding Command="{x:Static custom:MainWindow.FindPreviousCommand}" 
                    Executed="FindPreviousCommandHandler"
                    CanExecute="AlwaysTrue"
                    />
        <CommandBinding Command="{x:Static custom:MainWindow.CommentCommand}" 
                    Executed="CommentCommandHandler" 
                    CanExecute="AlwaysTrue" />
        <CommandBinding Command="{x:Static custom:MainWindow.UnCommentCommand}" 
                    Executed="UnCommentCommandHandler" 
                    CanExecute="AlwaysTrue" />
        <CommandBinding Command="{x:Static custom:MainWindow.CompileCommand}" 
                    Executed="CompileCommandHandler" 
                    CanExecute="AlwaysTrue" />
        <CommandBinding Command="{x:Static custom:MainWindow.SavePdfCommand}" 
                    Executed="SavePdfHandler" 
                    CanExecute="AlwaysTrue" />
        <CommandBinding Command="{x:Static custom:MainWindow.SavePdfAsCommand}" 
                    Executed="SavePdfAsHandler" 
                    CanExecute="AlwaysTrue" />
        <CommandBinding Command="{x:Static custom:MainWindow.ShowPdfCommand}" 
                    Executed="ShowPdfHandler" 
                    CanExecute="AlwaysTrue" />
    </Window.CommandBindings>
    <Window.InputBindings>
        <KeyBinding Command="{x:Static custom:MainWindow.CommentCommand}" Key="D" Modifiers="Ctrl"/>
        <KeyBinding Command="{x:Static custom:MainWindow.UnCommentCommand}" Key="D" Modifiers="Ctrl+Shift"/>
        <KeyBinding Command="{x:Static custom:MainWindow.FindNextCommand}" Key="F3"/>
        <KeyBinding Command="{x:Static custom:MainWindow.FindPreviousCommand}" Key="F3" Modifiers="Shift"/>
        <KeyBinding Command="{x:Static custom:MainWindow.ShowCodeCompletionsCommand}" Key="SPACE"  Modifiers="Ctrl"/>
        <KeyBinding Command="{x:Static custom:MainWindow.CompileCommand}" Key="F5"/>
        <KeyBinding Command="{x:Static custom:MainWindow.ShowPdfCommand}" Key="F6"/>
        <KeyBinding Command="{x:Static custom:MainWindow.SavePdfCommand}" Key="S" Modifiers="Ctrl+Shift"/>
    </Window.InputBindings>
    <Grid>
            <Grid.RowDefinitions>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="*"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
        </Grid.RowDefinitions>
        <Menu Height="23" HorizontalAlignment="Stretch" Name="menu1" VerticalAlignment="Top" Grid.Row="0">
            <MenuItem Header="_File" >
                <MenuItem Header="Open" Command="ApplicationCommands.Open" />
                <MenuItem Header="New" Command="ApplicationCommands.New" />
                <MenuItem Header="Save" Command="ApplicationCommands.Save" />
                <MenuItem Header="Save As..."  Command="ApplicationCommands.SaveAs" />
                <Separator/>
                <MenuItem Header="Save Pdf" Command="{x:Static custom:MainWindow.SavePdfCommand}"/>
                <MenuItem Header="Save Pdf As..." Command="{x:Static custom:MainWindow.SavePdfAsCommand}" InputGestureText="Ctrtl+Shift+S"/>
                <common:RecentFileList x:Name="RecentFileList"/>
                <MenuItem Header="Quit" Command="ApplicationCommands.Close"  />
            </MenuItem>
            <MenuItem Header="_Edit" >
                <MenuItem Header="Undo" Command="ApplicationCommands.Undo"/>
                <MenuItem Header="Redo" Command="ApplicationCommands.Redo"/>
                <Separator/>
                <MenuItem Header="Copy" Command="ApplicationCommands.Copy"/>
                <MenuItem Header="Paste" Command="ApplicationCommands.Paste"/>
                <MenuItem Header="Cut" Command="ApplicationCommands.Cut"/>
                <Separator/>
                <MenuItem Header="Find..."  Command="ApplicationCommands.Find"/>
                <MenuItem Header="Replace..."  Command="ApplicationCommands.Replace"/>
                <MenuItem Header="Find Next"  Command="{x:Static custom:MainWindow.FindNextCommand}" InputGestureText="F3"/>
                <Separator/>
                <MenuItem Header="Comment" Command="{x:Static custom:MainWindow.CommentCommand}"/>
                <MenuItem Header="Uncomment" Command="{x:Static custom:MainWindow.UnCommentCommand}"/>
            </MenuItem>
            <MenuItem Header="_View">
                <MenuItem Header="Show Pdf in external viewer" Command="{x:Static custom:MainWindow.ShowPdfCommand}" InputGestureText="F6"/>
                <Separator/>
                <MenuItem Header="Fancy Mode" IsCheckable="True" IsChecked="{Binding ElementName=chkFancyMode, Path=IsChecked}"/>
                <MenuItem Header="Standard Mode" IsCheckable="True" IsChecked="{Binding ElementName=chkStandardMode, Path=IsChecked}"/>
                <MenuItem Header="Toolbars">
                    <MenuItem Header="Main" IsChecked="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowFiles, Mode=TwoWay}" IsCheckable="True" />
                    <MenuItem Header="Zoom" IsChecked="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowZoom, Mode=TwoWay}" IsCheckable="True" />
                    <MenuItem Header="Tools" IsChecked="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowTools, Mode=TwoWay}" IsCheckable="True"/>
                        <!-- <MenuItem Header="Bounding Box" IsChecked="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowBB, Mode=TwoWay}" IsCheckable="True"/> -->
                    <MenuItem Header="Mode" IsChecked="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowMode, Mode=TwoWay}" IsCheckable="True"/>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="_Compilation">
                <MenuItem Header="Compile" Command="{x:Static custom:MainWindow.CompileCommand}" InputGestureText="F5"/>
                <MenuItem Name="mnuAbort" Header="Abort" Click="AbortCompilationClick"
                          IsEnabled="{Binding Source={x:Static my:TheCompiler.Instance}, Path=Compiling, Mode=OneWay}"/>
                <Separator/>
                <MenuItem Header="(Re-)Generate precompiled headers" Click="GenerateHeadersClick"/>
            </MenuItem>
            <MenuItem Header="_Settings">
                <MenuItem Header="Snippet Manager..." Click="SnippetMenuClick"/>
                <MenuItem Header="Settings..." Click="SettingsMenuClick"/>
                <MenuItem Header="Test..." Click="TestClick"/>
                <MenuItem Header="Test...Updatetexts" Click="TestUpdClick"/>
                <MenuItem Header="Test...Error Listview" Click="Test2Click"/>
            </MenuItem>
            <MenuItem Header="?">
                <MenuItem Header="Help..."/>
                <MenuItem Header="About..." Click="AboutClick"/>
            </MenuItem>
        </Menu>
        <ToolBarTray Grid.Row="1">
            <ToolBar Height="28" Name="tlbMain" Visibility="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowFiles, Converter={StaticResource boolToVis}}">
                <Button Command="ApplicationCommands.New">
                    <Image Source="/TikzEdt;component/Images/NewDocument_32x32.png" Stretch="Fill" Height="16" Width="16"/>
                </Button>
                <Button Command="ApplicationCommands.Open">
                    <Image Source="/TikzEdt;component/Images/openfolderHS.png"  Stretch="Fill" Height="16" Width="16"/>
                </Button>
                <Button Command="ApplicationCommands.Save">
                    <Image Source="/TikzEdt;component/Images/saveHS.png"  Stretch="Fill" Height="16" Width="16" />
                </Button>
                <Separator/>
                <Button Command="ApplicationCommands.Paste">
                    <Image Source="/TikzEdt;component/Images/PasteHS.png"  Stretch="Fill" Height="16" Width="16"/>
                </Button>
                <Button Command="ApplicationCommands.Copy">
                    <Image Source="/TikzEdt;component/Images/copy.png"  Stretch="Fill" Height="16" Width="16"/>
                </Button>
                <Button Command="ApplicationCommands.Cut">
                    <Image Source="/TikzEdt;component/Images/cut.png"  Stretch="Fill" Height="16" Width="16"/>
                </Button>
                <Separator/>
                <Button Command="{x:Static custom:MainWindow.CompileCommand}">
                    <Image Source="/TikzEdt;component/Images/PlayHS.png"  Stretch="Fill" Height="16" Width="16"/>
                    <Button.ToolTip>
                        Compile the file (F5)
                    </Button.ToolTip>
                </Button>
                <Button Name="cmdAbortCompilation" Click="AbortCompilationClick" 
                        IsEnabled="{Binding Source={x:Static my:TheCompiler.Instance}, Path=Compiling, Mode=OneWay}">
                    <Image Source="/TikzEdt;component/Images/error.png" Style="{StaticResource toolbarImageStyle}" Stretch="Fill" Height="16" Width="16"/>
                    <Button.ToolTip>Abort compilation in case something goes wrong</Button.ToolTip>
                </Button>
                <Separator/>
                <CheckBox HorizontalAlignment="Center" IsChecked="True" Checked="CheckBox_Checked" IsEnabled="{Binding ElementName=chkFancyMode, Path=IsChecked}" Name="chkOverlay" Unchecked="chkOverlay_Unchecked">
                    Overlay
                    <CheckBox.ToolTip>Switch the overlay displaying on top of the preview on/off</CheckBox.ToolTip>
                </CheckBox>
            </ToolBar>
            <ToolBar Name="tlbZoom"
                     Visibility="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowZoom, Converter={StaticResource boolToVis}}">
            <Button Click="cmdZoomOutClick">
                    <Image Source="/TikzEdt;component/Images/ZoomOutHS.png"  Stretch="Fill" Height="16" Width="16"/>
                </Button>
                <ComboBox Name="cmbZoom"  Width="60" ItemsSource="{Binding}" SelectionChanged="cmbZoom_SelectionChanged" Text="100%" SelectedIndex="3" PreviewTextInput="cmbZoom_PreviewTextInput" IsEditable="True" LostFocus="cmbZoom_LostFocus">
                    <ComboBox.Style>
                        <Style>
                            <EventSetter Event="TextBox.TextChanged" Handler="cmbZoomTextChanged" />
                        </Style>
                    </ComboBox.Style>

                    <ComboBoxItem Content="10%" />
                    <ComboBoxItem Content="50%" />
                    <ComboBoxItem Content="75%" />
                    <ComboBoxItem Content="100%" />
                    <ComboBoxItem Content="150%" />
                    <ComboBoxItem Content="200%" />
                    <ComboBoxItem Content="300%" />
                    <ComboBoxItem Content="500%" />
                    <ComboBoxItem Content="700%" />
                    <ComboBoxItem Content="1000%" />
                    <ComboBoxItem Content="1500%" />
                    <ComboBoxItem Content="2000%" />
                </ComboBox>
                <Button Click="cmdZoomInClick">
                    <Image Source="/TikzEdt;component/Images/ZoomInHS.png"  Stretch="Fill" Height="16" Width="16"/>
                </Button>
               </ToolBar>
            <ToolBar Height="28" Name="tlbGrid">
                <TextBlock VerticalAlignment="Center" Margin="0 0 3 0">Grid:</TextBlock>
                <ComboBox Name="cmbGrid"  Width="40" ItemsSource="{Binding}" SelectedIndex="4" IsEditable="True"
                          Text="{Binding Source={x:Static p:Settings.Default}, Path=Raster_GridWidth, Mode=TwoWay}">
                    <ComboBox.Style>
                        <Style>
                            <EventSetter Event="TextBox.TextChanged" Handler="cmbGridTextChanged" />
                        </Style>
                    </ComboBox.Style>
                    <ComboBoxItem Content="0" />
                    <ComboBoxItem Content="0.1" />
                    <ComboBoxItem Content="0.2" />
                    <ComboBoxItem Content="0.5" />
                    <ComboBoxItem Content="1"/>
                </ComboBox>
                <TextBlock Margin="3 0 3 0" VerticalAlignment="Center" ToolTip="The number of coordinate lines of constant angular parameter shown in polar coordinate mode">RS:</TextBlock>
                <TextBox Width ="30" Name="txtRadialSteps" Text="{Binding Source={x:Static p:Settings.Default}, Path=Raster_RadSteps, Mode=TwoWay}" TextChanged="txtRadialSteps_TextChanged" />                
                <TextBlock Margin="3 0 3 0" VerticalAlignment="Center" ToolTip="The offset (in degrees) of the first coordinate line of constant angular parameter shown in polar coordinate mode">RO:</TextBlock>
                <TextBox Width ="30" Name="txtRadialOffset" Text="{Binding Source={x:Static p:Settings.Default}, Path=Raster_RadialOffset, Mode=TwoWay}" TextChanged="txtRadialOffset_TextChanged" />
                <!-- <extToolkit:NumericUpDown Increment="1" Maximum="360" Minimum="-360" Width="50"/> -->
            </ToolBar>
            
            <ToolBar Name="tlbTools"  Height="28" Visibility="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowTools, Converter={StaticResource boolToVis}}" Band="1">
                <RadioButton HorizontalAlignment="Left" Name="rbToolMove" VerticalAlignment="Top" IsChecked="True" Checked="rb1_Checked">
                    <Image Source="/TikzEdt;component/Images/base_cursor.png" Style="{StaticResource toolbarImageStyle}" Stretch="Fill" Height="16" Width="16"/>
                </RadioButton>
                <RadioButton HorizontalAlignment="Left" Name="rbToolAddVert" VerticalAlignment="Top" Checked="rb1_Checked">
                    <Image Source="/TikzEdt;component/Images/bmpvert.png" Style="{StaticResource toolbarImageStyle}"  Stretch="Fill" Height="16" Width="16"/>
                </RadioButton>
                <RadioButton HorizontalAlignment="Left" Name="rbToolAddEdge" VerticalAlignment="Top" Checked="rb1_Checked">
                    <Image Source="/TikzEdt;component/Images/edge.png" Style="{StaticResource toolbarImageStyle}"  Stretch="Fill" Height="16" Width="16"/>
                </RadioButton>
                <RadioButton HorizontalAlignment="Left" Name="rbToolAddPath" VerticalAlignment="Top" Checked="rb1_Checked">
                    <Image Source="/TikzEdt;component/Images/path.png" Style="{StaticResource toolbarImageStyle}"  Stretch="Fill" Height="16" Width="16"/>
                </RadioButton>
                <RadioButton HorizontalAlignment="Left" Name="rbToolRectangle" VerticalAlignment="Top" Checked="rb1_Checked">
                    <Image Source="/TikzEdt;component/Images/Rectangle.png" Style="{StaticResource toolbarImageStyle}"  Stretch="Fill" Height="16" Width="16"/>
                </RadioButton>
                <RadioButton HorizontalAlignment="Left" Name="rbToolEllipse" VerticalAlignment="Top" Checked="rb1_Checked">
                    <Image Source="/TikzEdt;component/Images/Ellipse.png" Style="{StaticResource toolbarImageStyle}"  Stretch="Fill" Height="16" Width="16"/>
                </RadioButton>
                <TextBlock Margin="3 0 3 0" VerticalAlignment="Center">Node style:</TextBlock>
                <ComboBox Name="cmbNodeStyles" Width="80" IsEditable="True" ItemsPanel="{DynamicResource Virtualized}"></ComboBox>
                <TextBlock Margin="3 0 3 0" VerticalAlignment="Center">Edge style:</TextBlock>
                <ComboBox Name="cmbEdgeStyles" Width="80" IsEditable="True" ItemsPanel="{DynamicResource Virtualized}"></ComboBox>
            </ToolBar>
            <!-- <ToolBar Height="28" Name="tlbBB" Visibility="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowBB, Converter={StaticResource boolToVis}}">
                <TextBlock Name="txtBB" Margin="0 0 3 0" VerticalAlignment="Center">Bounding Box:</TextBlock>
                
                <CheckBox Name="chkAutoBB" Checked="chkAutoBB_Checked" Unchecked="chkAutoBB_Checked" IsChecked="True">Auto</CheckBox>
                <TextBlock Margin="3 0 3 0" VerticalAlignment="Center">X</TextBlock>
            <TextBox Name="txtBBX" Width="25" IsEnabled="{Binding ElementName=chkAutoBB, Path=IsChecked, Converter={StaticResource BoolInverter}}"/>
                <TextBlock Margin="3 0 3 0" VerticalAlignment="Center">Y</TextBlock>
            <TextBox Name="txtBBY" Width="25" IsEnabled="{Binding ElementName=chkAutoBB, Path=IsChecked, Converter={StaticResource BoolInverter}}"/>
                <TextBlock Margin="3 0 3 0" VerticalAlignment="Center">W</TextBlock>
            <TextBox Name="txtBBW" Width="25" IsEnabled="{Binding ElementName=chkAutoBB, Path=IsChecked, Converter={StaticResource BoolInverter}}"/>
                <TextBlock Margin="3 0 3 0" VerticalAlignment="Center">H</TextBlock>
            <TextBox Name="txtBBH" Width="25" IsEnabled="{Binding ElementName=chkAutoBB, Path=IsChecked, Converter={StaticResource BoolInverter}}"/>
        </ToolBar> -->
            <ToolBar  Band="1" Height="28" Name="tlbMode"
                      Visibility="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowMode, Converter={StaticResource boolToVis}}">
                <TextBlock Margin="3 0 3 0" VerticalAlignment="Center">Mode:</TextBlock>
                <RadioButton IsChecked="True" Name="chkFancyMode" Checked="chkFancyMode_Checked"
                             Style="{StaticResource {x:Type ToggleButton}}" Focusable="False"
                             ToolTipService.InitialShowDelay="0" ToolTipService.ShowDuration="20000">
                    <DockPanel>
                    <Image Source="/TikzEdt;component/Images/base_star_32.png" Height="16" Width="16" Stretch="Fill"></Image>
                        <TextBlock>Wysiwyg</TextBlock>
                    </DockPanel>
                    <RadioButton.ToolTip> 
                        <StackPanel>
                            <TextBlock Text="Wysiwyg Mode" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                In this mode, the parser and the overlay are turned on.
                                There is also some command smuggled into the source code to determine
                                the transformation from Tikz to Screen coordinates.
                            </TextBlock>
                        </StackPanel>
                        </RadioButton.ToolTip>
                    </RadioButton>
                <RadioButton Name="chkStandardMode" Style="{StaticResource {x:Type ToggleButton}}" Focusable="False" Checked="chkFancyMode_Checked"
                             ToolTipService.InitialShowDelay="0" ToolTipService.ShowDuration="20000">
                    <DockPanel>
                        <!-- <Image Source="/TikzEdt;component/Images/base_star_32.png"></Image>-->
                        <TextBlock>Preview</TextBlock>
                    </DockPanel>
                    <RadioButton.ToolTip>
                         <StackPanel>
                            <TextBlock Text="Preview Mode" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                In this mode, the parser and the overlay are turned off.
                                The document is rendered as it is. Hence TikzEdt becomes 
                                a pure text editor with Preview. Use this mode if you have
                                problems with Wysiwyg mode (speed/stability).
                                Note that the Picture displayed on the right is a temporary 
                                pdf file stored in the tex-file's directory. If you want to
                                produce the final pdf, choose Production Mode.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <RadioButton Name="chkProductionMode" Style="{StaticResource {x:Type ToggleButton}}"  Focusable="False" Checked="chkFancyMode_Checked"
                             ToolTipService.InitialShowDelay="0" ToolTipService.ShowDuration="20000">
                    <DockPanel>
                        <!-- <Image Source="/TikzEdt;component/Images/base_star_32.png"></Image>-->
                        <TextBlock>Production</TextBlock>
                    </DockPanel>
                    <RadioButton.ToolTip>                        
                        <StackPanel>
                            <TextBlock Text="Production Mode" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                This mode is the same as Standard Mode, except that 
                                (i) the picture displayed on the right is the final 
                                pdf output (file yourtexfile.pdf)
                                (ii) there is no auto-compilation, you have to hit compile 
                                to save and compile the source. (This is to avoid automatic
                                saving of changes to the source file.) 
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
            </ToolBar>
        </ToolBarTray>
        <Grid Grid.Row="2">
            <Grid.RowDefinitions>
                <RowDefinition></RowDefinition>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <!--  Width="{Binding LeftToolsColWidthSetting, Source={x:Static p:Settings.Default},
                    Converter={StaticResource BoolToWidth}, ConverterParameter=LeftToolsColVisible,
                    Mode=TwoWay}"
                <ColumnDefinition Width="{Binding LeftMenuColWidthSetting, Source={x:Static p:Settings.Default}, Mode=TwoWay}" Name="LeftMenuCol"></ColumnDefinition> -->
                <ColumnDefinition Width="Auto" Name="LeftMenuCol"></ColumnDefinition>
                <ColumnDefinition Name="LeftToolsCol">
                    <ColumnDefinition.Width>
                        <MultiBinding Converter="{StaticResource BoolToWidth}" Mode="OneWay" >
                            <Binding Path="LeftToolsColWidthSetting" Source="{x:Static p:Settings.Default}" />
                            <Binding Path="LeftToolsColVisible" Source="{x:Static p:Settings.Default}" />
                        </MultiBinding>
                    </ColumnDefinition.Width>
                </ColumnDefinition>
                <ColumnDefinition Name="LeftSplitterCol">
                    <ColumnDefinition.Width>
                        <MultiBinding Converter="{StaticResource BoolToWidth}" Mode="OneWay" >
                            <Binding Path="SplitterColWidthSetting" Source="{x:Static p:Settings.Default}" />
                            <Binding Path="LeftToolsColVisible" Source="{x:Static p:Settings.Default}" />
                        </MultiBinding>
                    </ColumnDefinition.Width>
                </ColumnDefinition>
                <ColumnDefinition Width="{Binding OverlayCanvasColWidthSetting, Source={x:Static p:Settings.Default}, Mode=TwoWay}" Name="OverlayCanvasCol"></ColumnDefinition>
                <ColumnDefinition Width="3"></ColumnDefinition>
                <ColumnDefinition Width="{Binding OverlayCanvasCol2WidthSetting, Source={x:Static p:Settings.Default}, Mode=TwoWay}" Name="OverlayCanvasCol2"></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <StackPanel Grid.Column="0" Background="Gray">
                <ToggleButton  Width="60" Name="cmdFiles" Checked="cmdSnippets_Checked" Unchecked="cmdSnippets_Unchecked" 
                              Visibility="Collapsed" Focusable="False">
                    <ToggleButton.LayoutTransform>
                        <RotateTransform Angle="-90"/>
                    </ToggleButton.LayoutTransform>
                    Files
                </ToggleButton>
                <ToggleButton Width="60" Name="cmdSnippets" Checked="cmdSnippets_Checked" Unchecked="cmdSnippets_Unchecked" Focusable="False" IsChecked="True">
                    <ToggleButton.LayoutTransform>
                        <RotateTransform Angle="-90"/>
                    </ToggleButton.LayoutTransform>
                    Snippets
                </ToggleButton>
            </StackPanel>
            <GridSplitter Background="Gray" Grid.Column="2" Grid.Row="0" Height="Auto" Width="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
            <mySnippets:SnippetList x:Name="snippetlist1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" 
                                    Grid.Column="1" Grid.Row="0" OnInsert="snippetlist1_OnInsert" 
                                    ShowThumbnails="{Binding Source={x:Static p:Settings.Default}, Path=Snippets_ShowThumbs}" 
                                    Visibility="{Binding ElementName=cmdSnippets, Path=IsChecked, Converter={StaticResource boolToVis}}"/>
            <Grid Grid.Column="3" Background="Black">
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition Height="3"/>
                    <RowDefinition Height="{Binding StatusFieldRowHeightSetting, Source={x:Static p:Settings.Default}, Mode=TwoWay}" Name="StatusFieldRow" />                        
                </Grid.RowDefinitions>
                <GridSplitter Background="Gray" Grid.Row="1" Height="Auto" Width="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                <DockPanel LastChildFill="true" Grid.Row="2">
                    <StackPanel DockPanel.Dock="Left" Background="Gray">
                        <RadioButton Name="chkStatus" Checked="chkStatus_Checked" Unchecked="chkStatus_Unchecked" Focusable="False" 
                                      IsChecked="True" Style="{StaticResource {x:Type ToggleButton}}">
                            <RadioButton.LayoutTransform>
                                <RotateTransform Angle="-90"/>
                            </RadioButton.LayoutTransform>
                            <TextBlock Text="Stat" />
                        </RadioButton>
                        <RadioButton Name="chkFullTex" Focusable="False" Style="{StaticResource {x:Type ToggleButton}}">
                            <RadioButton.LayoutTransform>
                                <RotateTransform Angle="-90"/>
                            </RadioButton.LayoutTransform>
                            <TextBlock Text="Tex"/>
                        </RadioButton>
                        <RadioButton Name="chkErrorTex" Focusable="False" Style="{StaticResource {x:Type ToggleButton}}">
                            <RadioButton.LayoutTransform>
                                <RotateTransform Angle="-90"/>
                            </RadioButton.LayoutTransform>
                            <TextBlock Text="Err"/>
                        </RadioButton>
                    </StackPanel>
                    <Grid>
                        <RichTextBox  HorizontalAlignment="Stretch"  Name="txtStatus" VerticalAlignment="Stretch" IsReadOnly="True" VerticalScrollBarVisibility="Auto" 
                                      Visibility="{Binding ElementName=chkStatus, Path=IsChecked, Converter={StaticResource boolToVis}}"/>
                        <RichTextBox  HorizontalAlignment="Stretch"  Name="txtTexout" VerticalAlignment="Stretch" IsReadOnly="True" VerticalScrollBarVisibility="Auto" 
                                      Visibility="{Binding ElementName=chkFullTex, Path=IsChecked, Converter={StaticResource boolToVis}}"/>
                        <TextBox Name="textBox1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" IsReadOnly="True" VerticalScrollBarVisibility="Auto" 
                                      Visibility="{Binding ElementName=chkErrorTex, Path=IsChecked, Converter={StaticResource boolToVis}}"/>
                        <ListView Name="lstErrors" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                  IsSynchronizedWithCurrentItem="True"
                                  Visibility="{Binding ElementName=chkErrorTex, Path=IsChecked, Converter={StaticResource boolToVis}}" 
                                  MouseDoubleClick="lstErrors_MouseDoubleClick"
                                  ItemsSource="{Binding Source={StaticResource TexErrorsSource}}">
                            <ListView.Resources>

                            </ListView.Resources>
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="" Width="Auto">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <Image Source="{Binding Path=severity, Converter={StaticResource SeverityToImg}}" Width="16" Height="16"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn DisplayMemberBinding="{Binding Path=Message}" Header="Message" Width="{Binding MessageColWidth, Source={x:Static p:Settings.Default}, Mode=TwoWay}"/>
                                    <GridViewColumn DisplayMemberBinding="{Binding Path=Line}" Header="line" Width="{Binding LineColWidth, Source={x:Static p:Settings.Default}, Mode=TwoWay}" />
                                    <GridViewColumn DisplayMemberBinding="{Binding Path=Pos}" Header="pos" Width="{Binding PosColWidth, Source={x:Static p:Settings.Default}, Mode=TwoWay}" />
                                    <GridViewColumn DisplayMemberBinding="{Binding Path=SourceFileName}" Header="src" Width="{Binding SourceColWidth, Source={x:Static p:Settings.Default}, Mode=TwoWay}" />
                                </GridView>
                            </ListView.View>

                        </ListView>

                    </Grid>
                </DockPanel>
                <avalonedit:TextEditor HorizontalAlignment="Stretch" Name="txtCode" VerticalAlignment="Stretch" TextChanged="txtCode_TextChanged" 
                                       ShowLineNumbers="{Binding Source={x:Static p:Settings.Default}, Path=Editor_ShowLineNumbers}"
                                       WordWrap="{Binding Source={x:Static p:Settings.Default}, Path=Editor_WordWrap}" Drop="txtCode_Drop" DragEnter="txtCode_DragEnter">
                    <avalonedit:TextEditor.ContextMenu>
                        <ContextMenu >
                            <MenuItem Header="Copy" Command="ApplicationCommands.Copy"/>
                            <MenuItem Header="Cut" Command="ApplicationCommands.Cut"/>
                            <MenuItem Header="Paste" Command="ApplicationCommands.Paste"/>
                            <Separator />
                            <MenuItem Header="Comment" Command="{x:Static custom:MainWindow.CommentCommand}"/>
                            <MenuItem Header="Uncomment" Command="{x:Static custom:MainWindow.UnCommentCommand}"/>
                            <MenuItem Header="En-Scope" Click="Enscope_Click"/>
                            <Separator/>
                            <MenuItem Header="Mark item in Overlay (if possible)" Click="MarkAtOffsetClick" />
                        </ContextMenu>                            
                    </avalonedit:TextEditor.ContextMenu>
                </avalonedit:TextEditor>
            </Grid>
            <GridSplitter Background="Gray" Grid.Column="4" Grid.Row="0" Height="Auto" Width="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
            <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" Grid.Column="5">
                <!-- 
                <Button Grid.Row="0" Grid.Column="0">Hallo Welt</Button> <my:PdfOverlay  HorizontalAlignment="Stretch" x:Name="pdfOverlay1" VerticalAlignment="Stretch" Grid.Row="0" Grid.Column="0" />
                -->
                <Grid Background="#303030">
                    <my:RasterControl HorizontalAlignment="Center" x:Name="rasterControl1" Grid.Row="0" Width="200" Height="200" Grid.Column="0" VerticalAlignment="Center"
                                       Visibility="{Binding ElementName=chkFancyMode, Path=IsChecked, Converter={StaticResource boolToVis}}"  />
                    <my:TikzDisplay HorizontalAlignment="Center" x:Name="tikzDisplay1" 
                                    RenderTransparent="{Binding ElementName=chkFancyMode, Path=IsChecked}"
                                    VerticalAlignment="Center" Grid.Row="0" Grid.Column="0" />                   
                    <my:PdfOverlay  HorizontalAlignment="Center" x:Name="pdfOverlay1" VerticalAlignment="Center" Width="200" Height="200" Grid.Row="0" Grid.Column="0" 
                                    OnModified="pdfOverlay1_OnModified" BeginModify="pdfOverlay1_BeginModify" EndModify="pdfOverlay1_EndModify" 
                                    NodeStyle="{Binding ElementName=cmbNodeStyles, Path=Text,Mode=OneWay}" EdgeStyle="{Binding ElementName=cmbEdgeStyles, Path=Text, Mode=OneWay}"
                                    Visibility="{Binding ElementName=chkFancyMode, Path=IsChecked, Converter={StaticResource boolToVis}}"   
                                    JumpToSource="pdfOverlay1_JumpToSource" ToolChanged="pdfOverlay1_ToolChanged" MouseWheel="pdfOverlay1_MouseWheel"/>
                </Grid>
            </ScrollViewer>
        </Grid>
        <StatusBar Grid.Row="3" Height="23" HorizontalAlignment="Stretch" Name="statusBar1" VerticalAlignment="Top">
            <StatusBarItem>
                <TextBlock Name="textCompileInfo" Width="Auto"/>
            </StatusBarItem>
            <StatusBarItem>
                <ProgressBar Name="progressCompile" Visibility="Collapsed" Width="80" Height="10"/>
            </StatusBarItem>
            
            <StatusBarItem Name="CoordinateStatusBarItem" Content="(0,0)" DockPanel.Dock="Right" HorizontalAlignment="Right" />
            <StatusBarItem Name="StandAloneStatusBarItem" Content="" DockPanel.Dock="Right" HorizontalAlignment="Right" />

            <StatusBarItem Name="BBStatusBarItem" Content="Bounding Box:" DockPanel.Dock="Right" HorizontalAlignment="Right" />
            
        </StatusBar>
    </Grid>
</Window>
