<Window x:Class="TikzEdt.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:custom="clr-namespace:TikzEdt"
        xmlns:common="clr-namespace:Common"
        xmlns:osc="clr-namespace:OpenSourceControls;assembly=DockPanelSplitter"
        xmlns:avalonedit="http://icsharpcode.net/sharpdevelop/avalonedit" 
        xmlns:my="clr-namespace:TikzEdt"
        xmlns:mySnippets="clr-namespace:TikzEdt.Snippets"
        xmlns:p="clr-namespace:TikzEdt.Properties"
        xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase" 
        xmlns:extToolkit="clr-namespace:Microsoft.Windows.Controls;assembly=WPFToolkit.Extended"
        xmlns:ad="clr-namespace:AvalonDock;assembly=AvalonDock"
        xmlns:myEditor="clr-namespace:TikzEdt.Editor"
        xmlns:CustomWPFColorPicker="clr-namespace:CustomWPFColorPicker;assembly=CustomWPFColorPicker"
        xmlns:myVM="clr-namespace:TikzEdt.ViewModels"
        xmlns:FLV="clr-namespace:FileListView;assembly=FileListView"
        Title="TikzEdt" 
        Height="{Binding Source={x:Static p:Settings.Default}, Path=Window_Height, Mode=TwoWay}" 
        Width="{Binding Source={x:Static p:Settings.Default}, Path=Window_Width, Mode=TwoWay}" 
        Loaded="Window_Loaded" Closed="Window_Closed" Closing="Window_Closing" Icon="/TikzEdt;component/Images/tikzedt48.ico"
        xmlns:settings="clr-namespace:LogicaCMG.Settings"
        settings:WindowSettings.Save="True"
        UseLayoutRounding="True">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary 
                  Source="Resources/ResourceDict.xaml">
                </ResourceDictionary>
                <ResourceDictionary 
                  Source="Resources/MainWindowResources.xaml">
                </ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>
  <!--  <Window.Resources>
        <ItemsPanelTemplate x:Key="Virtualized">
            <VirtualizingStackPanel IsItemsHost="True"/>
        </ItemsPanelTemplate>        
        <Style TargetType="{x:Type Image}" x:Key="toolbarImageStyle">
            <Style.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Button}, AncestorLevel=1}, Path=IsEnabled}" Value="False">
                    <Setter Property="Opacity" Value="0.50"></Setter>
                </DataTrigger>
            </Style.Triggers>
        </Style> -->
        <!-- Note: If VS2010 tells you something like:
        "type my:InverseBooleanConverter was not found. verify that you are not missing an assembly"
        delete your obj directory within this project, then click the build button (F6) 
        (or Build->Clean, then Rebuild worked for me) -->
 <!--       <my:InverseBooleanConverter x:Key="BoolInverter" />
        <my:SeverityImageConverter x:Key="SeverityToImg"/>
        <BooleanToVisibilityConverter x:Key="boolToVis" />
        <my:InverseNullableBooleanConverter x:Key="NBoolInverter" />
        <my:BooleanToWidthConverter x:Key="BoolToWidth" />
        <my:CompareConverter x:Key="compareConverter"/>

        <CollectionViewSource x:Key="TexErrorsSource" Source="{Binding Source={x:Static my:MainWindow.TexErrors}}">
            <CollectionViewSource.SortDescriptions>
                <scm:SortDescription Direction="Descending" PropertyName="severity"/>
                <scm:SortDescription Direction="Ascending" PropertyName="SourceFileName"/>
                <scm:SortDescription Direction="Ascending" PropertyName="Line"/>
            </CollectionViewSource.SortDescriptions>
        </CollectionViewSource>
    </Window.Resources>  -->
    <Window.CommandBindings>
        <CommandBinding Command="ApplicationCommands.Undo"
                    Executed="UndoCommandHandler"
                    CanExecute="UndoCanExecute"                       
                    />
        <CommandBinding Command="ApplicationCommands.Redo"
                    Executed="RedoCommandHandler"
                    CanExecute="RedoCanExecute"                       
                    />
        <!--      <CommandBinding Command="ApplicationCommands.Open"
                    Executed="OpenCommandHandler"
                    CanExecute="AlwaysTrue"                       
                    /> 
        <CommandBinding Command="ApplicationCommands.Save"
                    Executed="SaveCommandHandler"
                    CanExecute="AlwaysTrue"
                    />
        <CommandBinding Command="ApplicationCommands.SaveAs"
                    Executed="SaveAsCommandHandler"
                    CanExecute="AlwaysTrue"
                    />-->
        <!--     <CommandBinding Command="ApplicationCommands.New"
                    Executed="NewCommandHandler"
                    CanExecute="AlwaysTrue"
                    />-->
        <CommandBinding Command="ApplicationCommands.Close"
                    Executed="ExitCommandHandler"
                    CanExecute="AlwaysTrue"
                    />
     <!--   <CommandBinding Command="ApplicationCommands.Find"
                    Executed="FindCommandHandler"
                    CanExecute="AlwaysTrue"
                    />
        <CommandBinding Command="ApplicationCommands.Replace"
                    Executed="ReplaceCommandHandler"
                    CanExecute="AlwaysTrue"
                    /> -->
        <CommandBinding Command="ApplicationCommands.Help"
                    Executed="HelpCommandHandler"
                    CanExecute="AlwaysTrue"
                    />
         <CommandBinding Command="NavigationCommands.DecreaseZoom"
                    Executed="ZoomoutCommandHandler"
                    CanExecute="AlwaysTrue"
                    />
        <CommandBinding Command="NavigationCommands.IncreaseZoom"
                    Executed="ZoominCommandHandler"
                    CanExecute="AlwaysTrue"
                    />
  <!--      <CommandBinding Command="{x:Static custom:MainWindow.ShowCodeCompletionsCommand}" 
                    Executed="ShowCodeCompletionsCommandHandler"
                    CanExecute="AlwaysTrue"
                    /> -->
   <!--     <CommandBinding Command="{x:Static custom:MainWindow.FindNextCommand}" 
                    Executed="FindNextCommandHandler"
                    CanExecute="AlwaysTrue"
                    /> 
        <CommandBinding Command="{x:Static custom:MainWindow.FindPreviousCommand}" 
                    Executed="FindPreviousCommandHandler"
                    CanExecute="AlwaysTrue"
                    />  -->
        <CommandBinding Command="{x:Static custom:MainWindow.CommentCommand}" 
                    Executed="CommentCommandHandler" 
                    CanExecute="AlwaysTrue" />
        <CommandBinding Command="{x:Static custom:MainWindow.UnCommentCommand}" 
                    Executed="UnCommentCommandHandler" 
                    CanExecute="AlwaysTrue" />
   <!--     <CommandBinding Command="{x:Static custom:MainWindow.SavePdfCommand}" 
                    Executed="SavePdfHandler" 
                    CanExecute="AlwaysTrue" />
        <CommandBinding Command="{x:Static custom:MainWindow.SavePdfAsCommand}" 
                    Executed="SavePdfAsHandler" 
                    CanExecute="AlwaysTrue" /> 
        <CommandBinding Command="{x:Static custom:MainWindow.ExportFileCommand}" 
                    Executed="ExportFileHandler" 
                    CanExecute="AlwaysTrue" /> -->
         <CommandBinding Command="{x:Static custom:MainWindow.ShowPdfCommand}" 
                    Executed="ShowPdfHandler" 
                    CanExecute="AlwaysTrue" />
        <CommandBinding Command="{x:Static custom:MainWindow.OpenPgfManualCommand}" 
                    Executed="OpenPgfManualHandler" 
                    CanExecute="AlwaysTrue" />
    </Window.CommandBindings>
    <Window.InputBindings>
        <KeyBinding Command="{x:Static custom:MainWindow.CommentCommand}" Key="D" Modifiers="Ctrl"/>
        <KeyBinding Command="{x:Static custom:MainWindow.UnCommentCommand}" Key="D" Modifiers="Ctrl+Shift"/>
        <KeyBinding Command="NavigationCommands.Search" Key="F3"/>
        <KeyBinding Command="NavigationCommands.Search" CommandParameter="notnull" Key="F3" Modifiers="Shift"/>
     <!--   <KeyBinding Command="{x:Static custom:MainWindow.ShowCodeCompletionsCommand}" Key="SPACE"  Modifiers="Ctrl"/> -->
        <KeyBinding Command="{Binding TheDocument.CompileCommand}" Key="F5"/>
        <KeyBinding Command="{x:Static custom:MainWindow.ShowPdfCommand}" Key="F6"/>
        <KeyBinding Command="{Binding TheDocument.SavePdfCommand}" Key="S" Modifiers="Ctrl+Shift"/>
        <KeyBinding Command="{x:Static custom:MainWindow.OpenPgfManualCommand}" Key="F2"/>
    
    </Window.InputBindings>
    <Grid>
            <Grid.RowDefinitions>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="*"></RowDefinition>
            <RowDefinition Height="0"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
        </Grid.RowDefinitions>
        <Menu Height="23" HorizontalAlignment="Stretch" Name="menu1" VerticalAlignment="Top" Grid.Row="0">
            <MenuItem Header="_File" >
                <MenuItem Header="Open..." Command="ApplicationCommands.Open" />
                <MenuItem Header="New" Command="ApplicationCommands.New" />
                <MenuItem Header="Open in new instance..." Command="ApplicationCommands.Open" CommandParameter="true"/>
                <MenuItem Header="New in new instance..." Command="ApplicationCommands.New" CommandParameter="true"/>
                <MenuItem Header="Save" Command="ApplicationCommands.Save" />
                <MenuItem Header="Save As..."  Command="ApplicationCommands.SaveAs" />
                <Separator/>
                <MenuItem Header="Save Pdf" Command="{Binding TheDocument.SavePdfCommand}" InputGestureText="Ctrtl+Shift+S"/>
                <MenuItem Header="Save Pdf As..." Command="{Binding TheDocument.SavePdfCommand}" CommandParameter="notnull"/>
                <MenuItem Header="Export File As..." Command="{Binding TheDocument.ExportFileCommand}"/>
                <common:RecentFileList x:Name="RecentFileList"/>
                <MenuItem Header="Quit" Command="ApplicationCommands.Close"  />
            </MenuItem>
            <MenuItem Header="_Edit" >
                <MenuItem Header="Undo" Command="ApplicationCommands.Undo"/>
                <MenuItem Header="Redo" Command="ApplicationCommands.Redo"/>
                <Separator/>
                <MenuItem Header="Copy" Command="ApplicationCommands.Copy"/>
                <MenuItem Header="Paste" Command="ApplicationCommands.Paste"/>
                <MenuItem Header="Cut" Command="ApplicationCommands.Cut"/> 
                <MenuItem Header="Copy all with Figure environment" Click="CopyAllWithFigureEnvironment_Click"/>
                <Separator/>
                <MenuItem Header="Find..."  Command="ApplicationCommands.Find"/>
                <MenuItem Header="Replace..."  Command="ApplicationCommands.Replace"/>
                <MenuItem Header="Find Next"  Command="NavigationCommands.Search" InputGestureText="F3"/>
                <Separator/>
                <MenuItem Header="Comment" Command="{x:Static custom:MainWindow.CommentCommand}"/>
                <MenuItem Header="Uncomment" Command="{x:Static custom:MainWindow.UnCommentCommand}"/>
            </MenuItem>
            <MenuItem Header="_View">
                <MenuItem Header="Show Pdf in external viewer" Command="{x:Static custom:MainWindow.ShowPdfCommand}" InputGestureText="F6"/>
                <Separator/>
                <MenuItem Header="Fancy Mode" IsCheckable="True" IsChecked="{Binding ElementName=chkFancyMode, Path=IsChecked}"/>
                <MenuItem Header="Standard Mode" IsCheckable="True" IsChecked="{Binding ElementName=chkStandardMode, Path=IsChecked}"/>
                <MenuItem Header="Toolbars">
                    <MenuItem Header="Main" IsChecked="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowFiles, Mode=TwoWay}" IsCheckable="True" />
                    <MenuItem Header="Zoom" IsChecked="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowZoom, Mode=TwoWay}" IsCheckable="True" />
                    <MenuItem Header="Tools" IsChecked="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowTools, Mode=TwoWay}" IsCheckable="True"/>
                        <!-- <MenuItem Header="Bounding Box" IsChecked="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowBB, Mode=TwoWay}" IsCheckable="True"/> -->
                    <MenuItem Header="Mode" IsChecked="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowMode, Mode=TwoWay}" IsCheckable="True"/>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="_Compilation">
                <MenuItem Header="Compile" Command="{Binding TheDocument.CompileCommand}" InputGestureText="F5"/>
                <MenuItem Name="mnuAbort" Header="Abort" Click="AbortCompilationClick"
                          IsEnabled="{Binding Source={x:Static my:TheCompiler.Instance}, Path=Compiling, Mode=OneWay}"/>
                <MenuItem Name="mnuAbortSnippet" Header="Abort current snippet compilation" Click="AbortSnippetCompilationClick"
                          IsEnabled="{Binding Source={x:Static my:TikzToBMPFactory.Instance}, Path=Compiling, Mode=OneWay}"/>
                <Separator/>
                <MenuItem Header="(Re-)Generate precompiled headers" Click="GenerateHeadersClick"/>
            </MenuItem>
            <MenuItem Header="_Settings">
                <MenuItem Header="Snippet Manager..." Click="SnippetMenuClick"/>
                <MenuItem Header="Settings..." Click="SettingsMenuClick"/>
                 <!-- <MenuItem Header="Test..." Click="TestClick"/>
               <MenuItem Header="Test...Updatetexts" Click="TestUpdClick"/>
                <MenuItem Header="Test...Error Listview" Click="Test2Click"/> -->
            </MenuItem>
            <MenuItem Header="?">
                <MenuItem Header="Help..." Command="ApplicationCommands.Help"/>
                <MenuItem Header="Open PGF manual..." Command="{x:Static custom:MainWindow.OpenPgfManualCommand}" InputGestureText="F2"/>
                <MenuItem Header="About..." Click="AboutClick"/>
            </MenuItem>
        </Menu>
        <ToolBarTray Grid.Row="1" Background="Silver">
            <ToolBar  Height="28" Name="tlbMain" Visibility="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowFiles, Converter={StaticResource boolToVis}}">
                <Button Command="ApplicationCommands.New" ToolTip="New file">
                    <Image Source="/TikzEdt;component/Images/NewDocument_32x32.png" Stretch="Fill" Height="16" Width="16" />
                </Button>
                <Button Command="ApplicationCommands.New" CommandParameter="true" ToolTip="Create a new file in a new Instance of TikzEdt">
                    <Image Source="/TikzEdt;component/Images/NewDocument_32x32newwin.png" Stretch="Fill" Height="16" Width="16"/>
                </Button>
                <Button Command="ApplicationCommands.Open"  ToolTip="Open file" >
                    <Image Source="/TikzEdt;component/Images/openfolderHS.png"  Stretch="Fill" Height="16" Width="16"/>
                </Button>
                <Button Command="ApplicationCommands.Open" CommandParameter="true" ToolTip="Open a file in a new Instance of TikzEdt">
                    <Image Source="/TikzEdt;component/Images/openfolderHSnewwin.png"  Stretch="Fill" Height="16" Width="16"/>
                </Button>
                <Button Command="ApplicationCommands.Save"  ToolTip="Save file">
                    <Image Source="/TikzEdt;component/Images/saveHS.png"  Stretch="Fill" Height="16" Width="16" />
                </Button>
                <Separator/>
                <Button Command="ApplicationCommands.Paste"  ToolTip="Paste">
                    <Image Source="/TikzEdt;component/Images/PasteHS.png"  Stretch="Fill" Height="16" Width="16"/>
                </Button>
                <Button Command="ApplicationCommands.Copy" ToolTip="Copy">
                    <Image Source="/TikzEdt;component/Images/copy.png"  Stretch="Fill" Height="16" Width="16"/>
                </Button>
                <Button Command="ApplicationCommands.Cut" ToolTip="Cut">
                    <Image Source="/TikzEdt;component/Images/cut.png"  Stretch="Fill" Height="16" Width="16"/>
                </Button>
                <Separator/>
                <Button Command="{Binding TheDocument.CompileCommand}">
                    <Image Source="/TikzEdt;component/Images/PlayHS.png"  Stretch="Fill" Height="16" Width="16"/>
                    <Button.ToolTip>
                        Compile the file (F5)
                    </Button.ToolTip>
                </Button>
                <Button Name="cmdAbortCompilation" Click="AbortCompilationClick" ToolTipService.ShowOnDisabled="True"
                        IsEnabled="{Binding Source={x:Static my:TheCompiler.Instance}, Path=Compiling, Mode=OneWay}">
                    <my:AutoGrayImage Source2="/TikzEdt;component/Images/error.png" Stretch="Fill" Height="16" Width="16" />
                    <Button.ToolTip>Abort compilation in case something goes wrong</Button.ToolTip>
                </Button>
                <Separator/>
                <CheckBox HorizontalAlignment="Center" IsChecked="{Binding ShowOverlay}" IsEnabled="{Binding EditorMode, Converter={StaticResource EnumToBool},ConverterParameter={x:Static myVM:TEMode.Wysiwyg}}"
                           Name="chkOverlay" >
                    Overlay
                    <CheckBox.ToolTip>Switch the overlay displaying on top of the preview on/off</CheckBox.ToolTip>
                </CheckBox>
            </ToolBar>
            <ToolBar Name="tlbZoom"
                     Visibility="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowZoom, Converter={StaticResource boolToVis}}">
                <Button Click="cmdZoomOutClick" ToolTip="Zoom out" >
                    <Image Source="/TikzEdt;component/Images/ZoomOutHS.png"  Stretch="Fill" Height="16" Width="16"/>
                </Button>
                <ComboBox Name="cmbZoom"  Width="60" ItemsSource="{Binding}" Text="{Binding TheDocument.Resolution,Converter={StaticResource ZoomResConverter}}" SelectedIndex="3" IsEditable="True">
                    <ComboBoxItem Content="10%" />
                    <ComboBoxItem Content="50%" />
                    <ComboBoxItem Content="75%" />
                    <ComboBoxItem Content="100%" />
                    <ComboBoxItem Content="150%" />
                    <ComboBoxItem Content="200%" />
                    <ComboBoxItem Content="300%" />
                    <ComboBoxItem Content="500%" />
                    <ComboBoxItem Content="700%" />
                    <ComboBoxItem Content="1000%" />
                    <ComboBoxItem Content="1500%" />
                    <ComboBoxItem Content="2000%" />
                </ComboBox>
                <Button Click="cmdZoomInClick" ToolTip="Zoom in">
                    <Image Source="/TikzEdt;component/Images/ZoomInHS.png"  Stretch="Fill" Height="16" Width="16"/>
                </Button>
               </ToolBar>
            <ToolBar Height="28" Name="tlbGrid">
                <TextBlock VerticalAlignment="Center" Margin="0 0 3 0">Grid:</TextBlock>
                <ComboBox Name="cmbGrid"  Width="40" ItemsSource="{Binding}" SelectedIndex="4" IsEditable="True"
                          Text="{Binding RasterWidth}">
                    <ComboBoxItem Content="0" />
                    <ComboBoxItem Content="0.1" />
                    <ComboBoxItem Content="0.2" />
                    <ComboBoxItem Content="0.5" />
                    <ComboBoxItem Content="1"/>
                    <ComboBoxItem Content="2"/>
                    <ComboBoxItem Content="5"/>
                </ComboBox>
                <TextBlock Margin="3 0 3 0" VerticalAlignment="Center" ToolTip="The number of coordinate lines of constant angular parameter shown in polar coordinate mode">RS:</TextBlock>
                <TextBox Width ="30" Name="txtRadialSteps" Text="{Binding RasterSteps}" />                
                <TextBlock Margin="3 0 3 0" VerticalAlignment="Center" ToolTip="The offset (in degrees) of the first coordinate line of constant angular parameter shown in polar coordinate mode">RO:</TextBlock>
                <TextBox Width ="30" Name="txtRadialOffset" Text="{Binding RasterRadialOffset}"  />
                <!-- <extToolkit:NumericUpDown Increment="1" Maximum="360" Minimum="-360" Width="50"/> -->
            </ToolBar>
            <ToolBar  Band="0" Height="28" Name="tlbMode"
                      Visibility="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowMode, Converter={StaticResource boolToVis}}">
                <ToolBar.Resources>
                    <Style TargetType="{x:Type RadioButton}" x:Key="flatbstyle"  BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}" >
                    </Style>
                </ToolBar.Resources>
                <TextBlock Margin="3 0 3 0" VerticalAlignment="Center">Mode:</TextBlock>
                <RadioButton Name="chkFancyMode"
                             Style="{StaticResource flatbstyle}" Focusable="False"
                             ToolTipService.InitialShowDelay="0" ToolTipService.ShowDuration="20000"
                             IsChecked="{Binding EditorMode, Converter={StaticResource EnumToBool},ConverterParameter={x:Static myVM:TEMode.Wysiwyg}}">
                    <DockPanel>
                        <Image Source="/TikzEdt;component/Images/base_star_32.png" Height="16" Width="16" Stretch="Fill"></Image>
                        <TextBlock>Wysiwyg</TextBlock>
                    </DockPanel>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Wysiwyg Mode" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                In this mode, the parser and the overlay are turned on.
                                There is also some command smuggled into the source code to determine
                                the transformation from Tikz to Screen coordinates.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <RadioButton Name="chkStandardMode" Style="{StaticResource flatbstyle}" Focusable="False"
                             ToolTipService.InitialShowDelay="0" ToolTipService.ShowDuration="20000"
                             IsChecked="{Binding EditorMode, Converter={StaticResource EnumToBool},ConverterParameter={x:Static myVM:TEMode.Preview}}">
                    <DockPanel>
                        <!-- <Image Source="/TikzEdt;component/Images/base_star_32.png"></Image>-->
                        <TextBlock>Preview</TextBlock>
                    </DockPanel>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Preview Mode" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                In this mode, the parser and the overlay are turned off.
                                The document is rendered as it is. Hence TikzEdt becomes 
                                a pure text editor with Preview. Use this mode if you have
                                problems with Wysiwyg mode (speed/stability).
                                Note that the Picture displayed on the right is a temporary 
                                pdf file stored in the tex-file's directory. If you want to
                                produce the final pdf, choose Production Mode.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <RadioButton Name="chkProductionMode" Style="{StaticResource flatbstyle}"  Focusable="False"
                             ToolTipService.InitialShowDelay="0" ToolTipService.ShowDuration="20000"
                             IsChecked="{Binding EditorMode, Converter={StaticResource EnumToBool},ConverterParameter={x:Static myVM:TEMode.Production}}">
                    <DockPanel>
                        <!-- <Image Source="/TikzEdt;component/Images/base_star_32.png"></Image>-->
                        <TextBlock>Production</TextBlock>
                    </DockPanel>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Production Mode" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                This mode is the same as Standard Mode, except that 
                                (i) the picture displayed on the right is the final 
                                pdf output (file yourtexfile.pdf)
                                (ii) there is no auto-compilation, you have to hit compile 
                                to save and compile the source. (This is to avoid automatic
                                saving of changes to the source file.)
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
            </ToolBar>
            <ToolBar Name="tlbTools"  Height="28" Visibility="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowTools, Converter={StaticResource boolToVis}}" Band="1">
                <RadioButton HorizontalAlignment="Left" Name="rbToolMove" VerticalAlignment="Top"
                             IsChecked="{Binding CurrentTool, Converter={StaticResource EnumToBool},ConverterParameter={x:Static my:OverlayToolType.move}}">
                    <my:AutoGrayImage Source2="/TikzEdt;component/Images/base_cursor.png" Stretch="Fill" Height="16" Width="16"/>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Select and move tool" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                Use this tool to select and move things. The coordinate raster is automatically adjusted to the 
                                coordinate system (Polar/Cartesian) at the object moved. Coordinate transformations are respected.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <RadioButton HorizontalAlignment="Left" Name="rbToolAddVert" VerticalAlignment="Top" 
                             IsChecked="{Binding CurrentTool, Converter={StaticResource EnumToBool},ConverterParameter={x:Static my:OverlayToolType.addvert}}">
                    <my:AutoGrayImage Source2="/TikzEdt;component/Images/bmpvert.png"  Stretch="Fill" Height="16" Width="16"/>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Node tool" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                A simple tool to create nodes. Choose the style you want to apply in the "Node style" dropdown on the right.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <RadioButton HorizontalAlignment="Left" Name="rbToolAddEdge" VerticalAlignment="Top"
                             IsChecked="{Binding CurrentTool, Converter={StaticResource EnumToBool},ConverterParameter={x:Static my:OverlayToolType.addedge}}">
                    <Image Source="/TikzEdt;component/Images/edge.png"  Stretch="Fill" Height="16" Width="16"/>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Edge tool" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                Connect things by edges. If the things are unnamed nodes, unique node names are inserted. If the things are coordinates, a node tag is inserted.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <RadioButton HorizontalAlignment="Left" Name="rbToolAddPath" VerticalAlignment="Top" 
                             IsChecked="{Binding CurrentTool, Converter={StaticResource EnumToBool},ConverterParameter={x:Static my:OverlayToolType.addpath}}">
                    <Image Source="/TikzEdt;component/Images/path.png"  Stretch="Fill" Height="16" Width="16"/>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Path tool" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                Create a path of straight lines. To close the path, double click when you want to close. If you don't want to close the path, use right button to stop drawnig. Use CTRL to draw nodes w/o drawing edges.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <RadioButton HorizontalAlignment="Left" Name="rbToolSmooth" VerticalAlignment="Top" 
                             IsChecked="{Binding CurrentTool, Converter={StaticResource EnumToBool},ConverterParameter={x:Static my:OverlayToolType.smooth}}">
                    <Image Source="/TikzEdt;component/Images/Smooth.png"  Stretch="Fill" Height="16" Width="16"/>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Smooth curve tool" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                Draw a smooth curve. Doubleclick closes the curve. Right click to not close the curve.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <RadioButton HorizontalAlignment="Left" Name="rbToolBezier" VerticalAlignment="Top"
                             IsChecked="{Binding CurrentTool, Converter={StaticResource EnumToBool},ConverterParameter={x:Static my:OverlayToolType.bezier}}">
                    <Image Source="/TikzEdt;component/Images/Bezier.png"  Stretch="Fill" Height="16" Width="16"/>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Bezier tool" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                Creates an path of Bezier curves.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <RadioButton HorizontalAlignment="Left" Name="rbToolRectangle" VerticalAlignment="Top" 
                             IsChecked="{Binding CurrentTool, Converter={StaticResource EnumToBool},ConverterParameter={x:Static my:OverlayToolType.rectangle}}">
                    <Image Source="/TikzEdt;component/Images/Rectangle.png" Stretch="Fill" Height="16" Width="16"/>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Rectangle tool" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                Creates a rectangle. Press CTRL for square.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <RadioButton HorizontalAlignment="Left" Name="rbToolEllipse" VerticalAlignment="Top" 
                             IsChecked="{Binding CurrentTool, Converter={StaticResource EnumToBool},ConverterParameter={x:Static my:OverlayToolType.ellipse}}">
                    <Image Source="/TikzEdt;component/Images/Ellipse.png" Stretch="Fill" Height="16" Width="16"/>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Ellipse tool" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                Creates an ellipse. Press CTRL for circle.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <RadioButton HorizontalAlignment="Left" Name="rbToolArc" VerticalAlignment="Top" 
                             IsChecked="{Binding CurrentTool, Converter={StaticResource EnumToBool},ConverterParameter={x:Static my:OverlayToolType.arc}}">
                    <Image Source="/TikzEdt;component/Images/arc.png" Stretch="Fill" Height="16" Width="16"/>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Arc/Pie tool" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                Creates an arc. Press CTRL to create a pie segment instead. SHIFT switches between the larger and smaller arc segments.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <RadioButton HorizontalAlignment="Left" Name="rbToolArcEdit" VerticalAlignment="Top" Visibility="Visible"
                             IsChecked="{Binding CurrentTool, Converter={StaticResource EnumToBool},ConverterParameter={x:Static my:OverlayToolType.arcedit}}">
                    <Image Source="/TikzEdt;component/Images/arcedit.png"  Stretch="Fill" Height="16" Width="16"/>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Arc/Pie editing tool" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                Sometimes the usual Move tool will not do what you want with arcs/pies.
                                This tool is a bit more clever.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <RadioButton HorizontalAlignment="Left" Name="rbToolGrid" VerticalAlignment="Top" 
                             IsChecked="{Binding CurrentTool, Converter={StaticResource EnumToBool},ConverterParameter={x:Static my:OverlayToolType.grid}}">
                    <Image Source="/TikzEdt;component/Images/Grid.png" Stretch="Fill" Height="16" Width="16"/>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Grid tool" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                Draws a grid. The grid spacing should be edited in the code.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <TextBlock Margin="3 0 3 0" VerticalAlignment="Center">Node style:</TextBlock>
                <ComboBox Name="cmbNodeStyles" Width="150" IsEditable="True" ItemsPanel="{DynamicResource Virtualized}"
                          Text="{Binding TheDocument.NodeStyle}" ItemsSource="{Binding TheDocument.TikzStyles}"/>
                <Button Name="cmdClearNStyle" Click="cmdClear_Click" ToolTip="Clear Node Style"
                        IsEnabled="{Binding ElementName=cmbNodeStyles, Path=Text, Converter={StaticResource compareConverter}, ConverterParameter=''}">
                    <my:AutoGrayImage Source2="/TikzEdt;component/Images/BuilderDialog_remove.png" />
                </Button>
                <TextBlock Margin="3 0 3 0" VerticalAlignment="Center">Edge style:</TextBlock>
                <ComboBox Name="cmbEdgeStyles" Width="150" IsEditable="True" ItemsPanel="{DynamicResource Virtualized}"
                          Text="{Binding TheDocument.EdgeStyle}" ItemsSource="{Binding TheDocument.TikzStyles}"/>
                <Button Name="cmdClearEStyle" Click="cmdClear_Click" ToolTip="Clear Edge Style" 
                        IsEnabled="{Binding ElementName=cmbEdgeStyles, Path=Text, Converter={StaticResource compareConverter}, ConverterParameter=''}">
                    <my:AutoGrayImage Source2="/TikzEdt;component/Images/BuilderDialog_remove.png" />
                </Button>
                <Separator/>
                <ToggleButton ToolTip="Use Polar coordinates for newly placed nodes" Name="chkPolar">
                    <Image Source="/TikzEdt;component/Images/radial.png" />
                </ToggleButton>
                <ComboBox Name="cmbModifier" Width="35" IsEditable="False">
                    <ComboBox.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Determines whether to use absolute or relative coordinates for newly placed nodes." />
                            <TextBlock Text="empty: absolute coordinates" />
                            <TextBlock Text="+: relative,not changing current point"/>
                            <TextBlock Text="++: relative, changing current point" />
                        </StackPanel>
                    </ComboBox.ToolTip>
                        <ComboBoxItem Content="" />
                    <ComboBoxItem Content="+" />
                    <ComboBoxItem Content="++" />
                </ComboBox>
            </ToolBar>
            <ToolBar Band="1">
                <ToolBar.ToolTip>
                    <StackPanel>
                        <TextBlock Text="Create color definition" FontWeight="Bold"></TextBlock>
                        <TextBlock Width="200" TextWrapping="Wrap">
                                Note: Use [draw=COLORNAME] to use color.
                        </TextBlock>
                    </StackPanel>
                </ToolBar.ToolTip>
                <CustomWPFColorPicker:ColorPickerControlView x:Name="ColorPicker1"  Height="16" Width="16" />
                <Button HorizontalAlignment="Left" Name="bColorPicker1Insert" VerticalAlignment="Top" Visibility="Visible" 
                        Click="ColorPicker1_OnInsert">
                    <Image Source="/TikzEdt;component/Images/colorinsert.png"  Stretch="Fill" Height="16" Width="16"/>
                    <Button.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Create color definition" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                First choose a color using the color picker. Then press this button to create a new color definition. It is insert right before the TikZ picture.                                
                            </TextBlock>
                        </StackPanel>
                    </Button.ToolTip>
                </Button>
            </ToolBar>
            <!-- <ToolBar Height="28" Name="tlbBB" Visibility="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowBB, Converter={StaticResource boolToVis}}">
                <TextBlock Name="txtBB" Margin="0 0 3 0" VerticalAlignment="Center">Bounding Box:</TextBlock>
                
                <CheckBox Name="chkAutoBB" Checked="chkAutoBB_Checked" Unchecked="chkAutoBB_Checked" IsChecked="True">Auto</CheckBox>
                <TextBlock Margin="3 0 3 0" VerticalAlignment="Center">X</TextBlock>
            <TextBox Name="txtBBX" Width="25" IsEnabled="{Binding ElementName=chkAutoBB, Path=IsChecked, Converter={StaticResource BoolInverter}}"/>
                <TextBlock Margin="3 0 3 0" VerticalAlignment="Center">Y</TextBlock>
            <TextBox Name="txtBBY" Width="25" IsEnabled="{Binding ElementName=chkAutoBB, Path=IsChecked, Converter={StaticResource BoolInverter}}"/>
                <TextBlock Margin="3 0 3 0" VerticalAlignment="Center">W</TextBlock>
            <TextBox Name="txtBBW" Width="25" IsEnabled="{Binding ElementName=chkAutoBB, Path=IsChecked, Converter={StaticResource BoolInverter}}"/>
                <TextBlock Margin="3 0 3 0" VerticalAlignment="Center">H</TextBlock>
            <TextBox Name="txtBBH" Width="25" IsEnabled="{Binding ElementName=chkAutoBB, Path=IsChecked, Converter={StaticResource BoolInverter}}"/>
        </ToolBar> -->
            
            
            
        </ToolBarTray>
        <DockPanel Grid.Row="2" Name="MainElements" LastChildFill="True">

            <!-- <Grid.RowDefinitions>
                <RowDefinition></RowDefinition>
            </Grid.RowDefinitions> -->
            <!--  Width="{Binding LeftToolsColWidthSetting, Source={x:Static p:Settings.Default},
                    Converter={StaticResource BoolToWidth}, ConverterParameter=LeftToolsColVisible,
                    Mode=TwoWay}"
                <ColumnDefinition Width="{Binding LeftMenuColWidthSetting, Source={x:Static p:Settings.Default}, Mode=TwoWay}" Name="LeftMenuCol"></ColumnDefinition> -->

            <!-- <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" Name="LeftMenuCol"></ColumnDefinition>
                <ColumnDefinition Name="LeftToolsCol">
                    <ColumnDefinition.Width>
                        <MultiBinding Converter="{StaticResource BoolToWidth}" Mode="TwoWay" >
                            <Binding Path="LeftToolsColWidthSetting" Source="{x:Static p:Settings.Default}" />
                            <Binding Path="LeftToolsColVisible" Source="{x:Static p:Settings.Default}" />
                        </MultiBinding>
                    </ColumnDefinition.Width>
                </ColumnDefinition>
                <ColumnDefinition Name="LeftSplitterCol">
                    <ColumnDefinition.Width>
                        <MultiBinding Converter="{StaticResource BoolToWidth}" Mode="OneWay" >
                            <Binding Path="SplitterColWidthSetting" Source="{x:Static p:Settings.Default}" />
                            <Binding Path="LeftToolsColVisible" Source="{x:Static p:Settings.Default}" />
                        </MultiBinding>
                    </ColumnDefinition.Width>
                </ColumnDefinition>
                <ColumnDefinition Width="{Binding OverlayCanvasColWidthSetting, Source={x:Static p:Settings.Default}, Mode=TwoWay}" Name="OverlayCanvasCol"></ColumnDefinition>
                <ColumnDefinition Width="3"></ColumnDefinition>
                <ColumnDefinition Width="{Binding OverlayCanvasCol2WidthSetting, Source={x:Static p:Settings.Default}, Mode=TwoWay}" Name="OverlayCanvasCol2"></ColumnDefinition>
            </Grid.ColumnDefinitions> -->
            
            
            <StackPanel DockPanel.Dock="Left" Background="Gray">
                <ToggleButton Width="60" Name="cmdFiles" Checked="cmdSnippets_Checked" Unchecked="cmdSnippets_Unchecked" 
                              Focusable="False">
                    <ToggleButton.LayoutTransform>
                        <RotateTransform Angle="-90"/>
                    </ToggleButton.LayoutTransform>
                    Files
                </ToggleButton>
                <ToggleButton Width="60" Name="cmdSnippets" Checked="cmdSnippets_Checked" Unchecked="cmdSnippets_Unchecked" Focusable="False" IsChecked="True">
                    <ToggleButton.LayoutTransform>
                        <RotateTransform Angle="-90"/>
                    </ToggleButton.LayoutTransform>
                    Snippets
                </ToggleButton>
            </StackPanel>            

            <!-- <GridSplitter Background="Gray" Grid.Column="2" Grid.Row="0" Height="Auto" Width="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />-->
            <Grid Width="{Binding Path=LeftToolsColWidthSetting, Source={x:Static p:Settings.Default}, Mode=TwoWay}" 
                  Visibility="{Binding Path=LeftToolsColVisible, Source={x:Static p:Settings.Default},Converter={StaticResource boolToVis}}">
            <mySnippets:SnippetList x:Name="snippetlist1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" 
                                    Grid.Column="1" Grid.Row="0" OnInsert="snippetlist1_OnInsert" 
                                    ShowThumbnails="{Binding Source={x:Static p:Settings.Default}, Path=Snippets_ShowThumbs}" 
                                    Visibility="{Binding ElementName=cmdSnippets, Path=IsChecked, Converter={StaticResource boolToVis}}"
                                    OnUseStyles="snippetlist1_OnUseStyles"/>
         <!--   <ListView Grid.Column="1" Grid.Row="0" Name="lstFiles" MouseRightButtonUp="lstFile_MouseRightButtonUp" MouseDoubleClick="lstFiles_MouseDoubleClick"
                      Visibility="{Binding ElementName=cmdFiles, Path=IsChecked, Converter={StaticResource boolToVis}}">
                <ListView.ToolTip>
                    TeX-files in current working directory
                </ListView.ToolTip>
            </ListView> -->
                <FLV:FolderView x:Name="folderView" Grid.Column="1" Grid.Row="0"
                            Visibility="{Binding ElementName=cmdFiles, Path=IsChecked, Converter={StaticResource boolToVis}}"
                            Filter="*.tex|*.tikz|*.*" FilterIndex="0" OnFileOpen="folderView_OnFileOpen"
                            RecentLocations="{Binding ElementName=RecentFileList,Path=BindableRecentFiles}"                                
                            />
            </Grid>
            <osc:DockPanelSplitter DockPanel.Dock="Left" Width="5" Background="Gray"
                                   Visibility="{Binding Path=LeftToolsColVisible, Source={x:Static p:Settings.Default},Converter={StaticResource boolToVis}}"/>
            <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" DockPanel.Dock="Right" Name="PreviewScrollViewer" 
                          Width="{Binding OverlayCanvasCol2WidthSetting, Source={x:Static p:Settings.Default}, Mode=TwoWay}" >
                <!-- 
                <Button Grid.Row="0" Grid.Column="0">Hallo Welt</Button> <my:PdfOverlay  HorizontalAlignment="Stretch" x:Name="pdfOverlay1" VerticalAlignment="Stretch" Grid.Row="0" Grid.Column="0" />
                -->
                <Grid Background="#303030" MouseWheel="Preview_MouseWheel">
                    <my:RasterControl HorizontalAlignment="Center" x:Name="rasterControl1" Grid.Row="0" Width="200" Height="200" Grid.Column="0" VerticalAlignment="Center"                                       
                                      Resolution="{Binding TheDocument.Resolution}"
                                      Visibility="{Binding EditorMode, Converter={StaticResource EnumToVis}, ConverterParameter={x:Static myVM:TEMode.Wysiwyg}}"
                                      ShowRaster="{Binding ShowOverlay}" RasterWidth="{Binding RasterWidth}" RasterRadialSteps="{Binding RasterSteps}"
                                      RadialOffset="{Binding RasterRadialOffset}"
                                      BB="{Binding TheDocument.CurrentBB}" />
                    <my:TikzDisplay HorizontalAlignment="Center" x:Name="tikzDisplay1" 
                                    RenderTransparent="{Binding EditorMode, Converter={StaticResource EnumToBool}, ConverterParameter={x:Static myVM:TEMode.Wysiwyg}}"
                                    PdfPath="{Binding TheDocument.PdfPath}" Resolution="{Binding TheDocument.Resolution}"
                                    VerticalAlignment="Center" Grid.Row="0" Grid.Column="0"                                     
                                    ReloadPdf="{Binding TheDocument.ReloadPdf}"/>
                    <my:PdfOverlay  HorizontalAlignment="Center" x:Name="pdfOverlay1" VerticalAlignment="Center" Width="200" Height="200" Grid.Row="0" Grid.Column="0"                                      
                                    NodeStyle="{Binding TheDocument.NodeStyle}" EdgeStyle="{Binding TheDocument.EdgeStyle}"                                                                          
                                    JumpToSource="pdfOverlay1_JumpToSource" Resolution="{Binding TheDocument.Resolution}"
                                    NewNodeModifier="{Binding ElementName=cmbModifier, Path=Text}"
                                    UsePolarCoordinates="{Binding ElementName=chkPolar, Path=IsChecked}"                                    
                                    Tool="{Binding CurrentTool, Mode=TwoWay}"
                                    ParseTree="{Binding TheDocument.ParseTree}" BB="{Binding TheDocument.CurrentBB}">
                        <my:PdfOverlay.Visibility>
                            <MultiBinding Converter="{StaticResource EnumBoolToVis}" ConverterParameter="{x:Static myVM:TEMode.Wysiwyg}">
                                <Binding Path="EditorMode" />
                                <Binding Path="ShowOverlay" />
                            </MultiBinding>
                        </my:PdfOverlay.Visibility>
                    </my:PdfOverlay>
                    <!-- NodeStyle="{Binding ElementName=cmbNodeStyles, Path=Text,Mode=OneWay}" EdgeStyle="{Binding ElementName=cmbEdgeStyles, Path=Text, Mode=OneWay}"
                                    Visibility="{Binding ElementName=chkFancyMode, Path=IsChecked, Converter={StaticResource boolToVis}}" -->
                </Grid>
            </ScrollViewer>
            <osc:DockPanelSplitter DockPanel.Dock="Right" Width="5" Background="Gray"/>

            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition Height="3"/>
                    <RowDefinition Height="{Binding StatusFieldRowHeightSetting, Source={x:Static p:Settings.Default}, Mode=TwoWay}" Name="StatusFieldRow" />
                </Grid.RowDefinitions>
                <GridSplitter Background="Gray" Grid.Row="1" Height="Auto" Width="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                <DockPanel LastChildFill="true" Grid.Row="2">
                    <StackPanel DockPanel.Dock="Left" Background="Gray">
                        <RadioButton Name="chkStatus" Focusable="False" 
                                      IsChecked="True" Style="{StaticResource {x:Type ToggleButton}}">
                            <RadioButton.LayoutTransform>
                                <RotateTransform Angle="-90"/>
                            </RadioButton.LayoutTransform>
                            <TextBlock Text="Stat" />
                        </RadioButton>
                        <RadioButton Name="chkFullTex" Focusable="False" Style="{StaticResource {x:Type ToggleButton}}">
                            <RadioButton.LayoutTransform>
                                <RotateTransform Angle="-90"/>
                            </RadioButton.LayoutTransform>
                            <TextBlock Text="Tex"/>
                        </RadioButton>
                        <RadioButton Name="chkErrorTex" Focusable="False" Style="{StaticResource {x:Type ToggleButton}}">
                            <RadioButton.LayoutTransform>
                                <RotateTransform Angle="-90"/>
                            </RadioButton.LayoutTransform>
                            <TextBlock Text="Err"/>
                        </RadioButton>
                    </StackPanel>
                    <Grid>
                        <RichTextBox  HorizontalAlignment="Stretch"  Name="txtStatus" VerticalAlignment="Stretch" IsReadOnly="True" VerticalScrollBarVisibility="Auto" 
                                      Visibility="{Binding ElementName=chkStatus, Path=IsChecked, Converter={StaticResource boolToVis}}"/>
                        <RichTextBox  HorizontalAlignment="Stretch"  Name="txtTexout" VerticalAlignment="Stretch" IsReadOnly="True" VerticalScrollBarVisibility="Auto" 
                                      Visibility="{Binding ElementName=chkFullTex, Path=IsChecked, Converter={StaticResource boolToVis}}"/>
                      <!--  <TextBox Name="textBox" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" IsReadOnly="True" VerticalScrollBarVisibility="Auto" 
                                      Visibility="{Binding ElementName=chkErrorTex, Path=IsChecked, Converter={StaticResource boolToVis}}"/> -->
                        <ListView Name="lstErrors" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                  IsSynchronizedWithCurrentItem="True"
                                  Visibility="{Binding ElementName=chkErrorTex, Path=IsChecked, Converter={StaticResource boolToVis}}" 
                                  MouseDoubleClick="lstErrors_MouseDoubleClick"
                                  ItemsSource="{Binding Source={StaticResource TexErrorsSource}}">
                            <ListView.Resources>

                            </ListView.Resources>
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="" Width="Auto">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <Image Source="{Binding Path=severity, Converter={StaticResource SeverityToImg}}" Width="16" Height="16"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn DisplayMemberBinding="{Binding Path=Message}" Header="Message" Width="{Binding MessageColWidth, Source={x:Static p:Settings.Default}, Mode=TwoWay}"/>
                                    <GridViewColumn DisplayMemberBinding="{Binding Path=Line}" Header="line" Width="{Binding LineColWidth, Source={x:Static p:Settings.Default}, Mode=TwoWay}" />
                                    <GridViewColumn DisplayMemberBinding="{Binding Path=Pos}" Header="pos" Width="{Binding PosColWidth, Source={x:Static p:Settings.Default}, Mode=TwoWay}" />
                                    <GridViewColumn DisplayMemberBinding="{Binding Path=SourceFileName}" Header="src" Width="{Binding SourceColWidth, Source={x:Static p:Settings.Default}, Mode=TwoWay}" />
                                </GridView>
                            </ListView.View>

                        </ListView>

                    </Grid>
                </DockPanel>                
                <myEditor:TextEditorEx HorizontalAlignment="Stretch" x:Name="txtCode" VerticalAlignment="Stretch" 
                                       ShowLineNumbers="{Binding Source={x:Static p:Settings.Default}, Path=Editor_ShowLineNumbers}"
                                       WordWrap="{Binding Source={x:Static p:Settings.Default}, Path=Editor_WordWrap}" Drop="txtCode_Drop" DragEnter="txtCode_DragEnter"
                                       ContextMenuOpening="txtCodeContextMenu_ContextMenuOpening"
                                       HDFile="{x:Static my:Consts.SystaxFileFullPath}"
                                       CompletionsFile="{x:Static my:Consts.CompletionsFileFullPath}"
                                       Document2="{Binding TheDocument.Document}"
                                       DynamicSnippets="{Binding TheDocument.TikzStyles}"
                                       DynamicSnippetsEnv="1"> <!-- ID=1 is currently the options environment -->
                    <myEditor:TextEditorEx.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Copy" Command="ApplicationCommands.Copy"/>
                            <MenuItem Header="Cut" Command="ApplicationCommands.Cut"/>
                            <MenuItem Header="Paste" Command="ApplicationCommands.Paste"/>
                            <Separator />
                            <MenuItem Header="Comment" Command="{x:Static custom:MainWindow.CommentCommand}"/>
                            <MenuItem Header="Uncomment" Command="{x:Static custom:MainWindow.UnCommentCommand}"/>
                            <MenuItem Header="En-Scope" Click="Enscope_Click"/>
                            <Separator/>
                            <MenuItem Header="Mark item in Overlay (if possible)" Click="MarkAtOffsetClick" />
                        </ContextMenu>
                    </myEditor:TextEditorEx.ContextMenu>
                </myEditor:TextEditorEx>
            </Grid>

            <!-- <GridSplitter Background="Gray" Grid.Column="4" Grid.Row="0" Height="Auto" Width="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />-->
       
        </DockPanel>
        <!-- DocumentsSource="{Binding MyDocuments}" -->
        <!--
        <ad:DockingManager x:Name="dockManager" Visibility="Hidden" Grid.Row="3"  Loaded="DockManager_Loaded">
           
            <ad:ResizingPanel ResizeWidth="*" ResizeHeight="*" EffectiveSize="0,0" Orientation="Horizontal">
                <ad:ResizingPanel ResizeWidth="150">
                <ad:DockablePane>
                        <ad:DockableContent Name="Files" Title="Files" IsCloseable="False" >
                            <ListView Name="lstFiles" MouseRightButtonUp="lstFile_MouseRightButtonUp" MouseDoubleClick="lstFiles_MouseDoubleClick">
                                <ListView.ToolTip>
                                    TeX-files in current working directory
                                </ListView.ToolTip>
                            </ListView>
                        </ad:DockableContent>
                        <ad:DockableContent Name="Snippets" Title="Snippets" IsCloseable="False" >
                       
                            <mySnippets:SnippetList x:Name="snippetlist1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" 
                                    Grid.Column="1" Grid.Row="0" OnInsert="snippetlist1_OnInsert" 
                                    ShowThumbnails="{Binding Source={x:Static p:Settings.Default}, Path=Snippets_ShowThumbs}" 
                                    Visibility="{Binding ElementName=cmdSnippets, Path=IsChecked, Converter={StaticResource boolToVis}}"/>
                      
                    </ad:DockableContent>
                    </ad:DockablePane>
                </ad:ResizingPanel>

                <ad:ResizingPanel Name="TextAndErrors" ResizeWidth="*" ResizeHeight="*" EffectiveSize="517,141.5" Orientation="Vertical">

                    <ad:DocumentPane Name="TextEditorsPane" ShowHeader="False">                        
                        <ad:DocumentContent Name="TextEditor" Title="Text Editor" IsCloseable="False">

                            <avalonedit:TextEditor HorizontalAlignment="Stretch" Name="txtCode" VerticalAlignment="Stretch" TextChanged="txtCode_TextChanged" 
                                       ShowLineNumbers="{Binding Source={x:Static p:Settings.Default}, Path=Editor_ShowLineNumbers}"
                                       WordWrap="{Binding Source={x:Static p:Settings.Default}, Path=Editor_WordWrap}" Drop="txtCode_Drop" DragEnter="txtCode_DragEnter">
                                <avalonedit:TextEditor.ContextMenu>
                                    <ContextMenu >
                                        <MenuItem Header="Copy" Command="ApplicationCommands.Copy"/>
                                        <MenuItem Header="Cut" Command="ApplicationCommands.Cut"/>
                                        <MenuItem Header="Paste" Command="ApplicationCommands.Paste"/>
                                        <Separator />
                                        <MenuItem Header="Comment" Command="{x:Static custom:MainWindow.CommentCommand}"/>
                                        <MenuItem Header="Uncomment" Command="{x:Static custom:MainWindow.UnCommentCommand}"/>
                                        <MenuItem Header="En-Scope" Click="Enscope_Click"/>
                                        <Separator/>
                                        <MenuItem Header="Mark item in Overlay (if possible)" Click="MarkAtOffsetClick" />
                                    </ContextMenu>
                                </avalonedit:TextEditor.ContextMenu>
                            </avalonedit:TextEditor>

                        </ad:DocumentContent>
                    </ad:DocumentPane>
                    <ad:DockablePane ad:ResizingPanel.ResizeHeight="200" SelectedIndex="0" >
                        <ad:DockableContent Name="StatusDock" Title="Status" IsCloseable="False">
                            <RichTextBox  HorizontalAlignment="Stretch"  Name="txtStatus" VerticalAlignment="Stretch" IsReadOnly="True" VerticalScrollBarVisibility="Auto"/>
                        </ad:DockableContent>
                        <ad:DockableContent Name="PdflatexDock" Title="Pdflatex" IsCloseable="False">
                            <RichTextBox  HorizontalAlignment="Stretch"  Name="txtTexout" VerticalAlignment="Stretch" IsReadOnly="True" VerticalScrollBarVisibility="Auto" />
                        </ad:DockableContent>
                        <ad:DockableContent Name="ErrorsDock" Title="Errors" IsCloseable="False">
                            <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Visible">
                                <ListView Name="lstErrors" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                  IsSynchronizedWithCurrentItem="True"                                  
                                  MouseDoubleClick="lstErrors_MouseDoubleClick"
                                  ItemsSource="{Binding Source={StaticResource TexErrorsSource}}"
                                      >


                                    <ListView.Resources>

                                    </ListView.Resources>
                                    <ListView.View>
                                        <GridView>
                                            <GridViewColumn Header="" Width="Auto">
                                                <GridViewColumn.CellTemplate>
                                                    <DataTemplate>
                                                        <Image Source="{Binding Path=severity, Converter={StaticResource SeverityToImg}}" Width="16" Height="16"/>
                                                    </DataTemplate>
                                                </GridViewColumn.CellTemplate>
                                            </GridViewColumn>
                                            <GridViewColumn DisplayMemberBinding="{Binding Path=Message}" Header="Message" Width="{Binding MessageColWidth, Source={x:Static p:Settings.Default}, Mode=TwoWay}"/>
                                            <GridViewColumn DisplayMemberBinding="{Binding Path=Line}" Header="line" Width="{Binding LineColWidth, Source={x:Static p:Settings.Default}, Mode=TwoWay}" />
                                            <GridViewColumn DisplayMemberBinding="{Binding Path=Pos}" Header="pos" Width="{Binding PosColWidth, Source={x:Static p:Settings.Default}, Mode=TwoWay}" />
                                            <GridViewColumn DisplayMemberBinding="{Binding Path=SourceFileName}" Header="src" Width="{Binding SourceColWidth, Source={x:Static p:Settings.Default}, Mode=TwoWay}" />
                                        </GridView>
                                    </ListView.View>

                                </ListView>
                            </ScrollViewer>
                        </ad:DockableContent>
                    </ad:DockablePane>
                </ad:ResizingPanel>

                <ad:ResizingPanel ResizeWidth="450">
                <ad:DockablePane>


                        <ad:DockableContent Name="Preview" Title="Preview" IsCloseable="False">

                            <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                                <Grid Background="#303030">
                                    <my:RasterControl HorizontalAlignment="Center" x:Name="rasterControl1" Grid.Row="0" Width="200" Height="200" Grid.Column="0" VerticalAlignment="Center"
                                       Visibility="{Binding ElementName=chkFancyMode, Path=IsChecked, Converter={StaticResource boolToVis}}"  />
                                    <my:TikzDisplay HorizontalAlignment="Center" x:Name="tikzDisplay1" 
                                    RenderTransparent="{Binding ElementName=chkFancyMode, Path=IsChecked}"
                                    VerticalAlignment="Center" Grid.Row="0" Grid.Column="0" />
                                    <my:PdfOverlay  HorizontalAlignment="Center" x:Name="pdfOverlay1" VerticalAlignment="Center" Width="200" Height="200" Grid.Row="0" Grid.Column="0" 
                                    OnModified="pdfOverlay1_OnModified" BeginModify="pdfOverlay1_BeginModify" EndModify="pdfOverlay1_EndModify" 
                                    NodeStyle="{Binding ElementName=cmbNodeStyles, Path=Text,Mode=OneWay}" EdgeStyle="{Binding ElementName=cmbEdgeStyles, Path=Text, Mode=OneWay}"
                                    Visibility="{Binding ElementName=chkFancyMode, Path=IsChecked, Converter={StaticResource boolToVis}}"   
                                    JumpToSource="pdfOverlay1_JumpToSource" ToolChanged="pdfOverlay1_ToolChanged" MouseWheel="pdfOverlay1_MouseWheel"/>
                                </Grid>
                            </ScrollViewer>


                        </ad:DockableContent>
                    </ad:DockablePane>
                </ad:ResizingPanel>


            </ad:ResizingPanel>

        </ad:DockingManager> -->
        <StatusBar Grid.Row="4" Height="23" HorizontalAlignment="Stretch" Name="statusBar1" VerticalAlignment="Top">
            <StatusBarItem>
                <TextBlock Name="textCompileInfo" Width="Auto"/>
            </StatusBarItem>
            <StatusBarItem>
                <ProgressBar Name="progressCompile" Visibility="Collapsed" Width="80" Height="10" IsIndeterminate="False" />
            </StatusBarItem>
            
            <StatusBarItem Name="CoordinateStatusBarItem" Content="(0,0)" DockPanel.Dock="Right" HorizontalAlignment="Right" />
            <StatusBarItem Name="StandAloneStatusBarItem" Content="" DockPanel.Dock="Right" HorizontalAlignment="Right" />

            <StatusBarItem Name="BBStatusBarItem" Content="Bounding Box:" DockPanel.Dock="Right" HorizontalAlignment="Right" />
            
        </StatusBar>
    </Grid>
</Window>
