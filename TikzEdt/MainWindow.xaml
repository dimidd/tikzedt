<Window x:Class="TikzEdt.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:custom="clr-namespace:TikzEdt"
        xmlns:common="clr-namespace:Common;assembly=WpfSpecificComponents"      
        xmlns:my="clr-namespace:TikzEdt"
        xmlns:myC="clr-namespace:TikzEdt;assembly=WpfSpecificComponents"
        xmlns:myApp="clr-namespace:TikzEdt;assembly=TEApplicationLogic"
        xmlns:mySnippets="clr-namespace:TikzEdt.Snippets"
        xmlns:myDynPreamble="clr-namespace:TikzEdt.DynPreamble"
        xmlns:p="clr-namespace:TikzEdt.Properties"
        xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase" 
        xmlns:extToolkit="clr-namespace:Microsoft.Windows.Controls;assembly=WPFToolkit.Extended"        
        xmlns:myEditor="clr-namespace:TikzEdt.Editor;assembly=TextEditorEx"
        xmlns:CustomWPFColorPicker="clr-namespace:CustomWPFColorPicker;assembly=CustomWPFColorPicker"
        xmlns:myVM="clr-namespace:TikzEdt.ViewModels;assembly=TEApplicationLogic"
        xmlns:FLV="clr-namespace:FileListView;assembly=FileListView"
        Title="{Binding TheDocument.DisplayString, StringFormat=TikzEdt - {0}}" 
        Height="{Binding Source={x:Static p:Settings.Default}, Path=Window_Height, Mode=TwoWay}" 
        Left="{Binding Source={x:Static p:Settings.Default}, Path=Window_Left, Mode=TwoWay}"
        Width="{Binding Source={x:Static p:Settings.Default}, Path=Window_Width, Mode=TwoWay}" 
        Top="{Binding Source={x:Static p:Settings.Default}, Path=Window_Top, Mode=TwoWay}"
        WindowState="{Binding Source={x:Static p:Settings.Default}, Path=Window_State, Mode=TwoWay}"
        Loaded="Window_Loaded" Closed="Window_Closed" Closing="Window_Closing" Icon="/TikzEdt;component/Images/tikzedt48.ico"        
        UseLayoutRounding="True" AllowsTransparency="False" 
        >
    <!-- xmlns:ad="clr-namespace:AvalonDock;assembly=AvalonDock"
        xmlns:settings="clr-namespace:LogicaCMG.Settings"
        settings:WindowSettings.Save="True" -->
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary 
                  Source="Resources/ResourceDict.xaml">
                </ResourceDictionary>
                <ResourceDictionary 
                  Source="Resources/MainWindowResources.xaml">
                </ResourceDictionary>
                <!-- <ResourceDictionary Source="Resources/Std_Styles.xaml"/> 
                <ResourceDictionary Source="Resources/ExpressionDark.xaml"/>-->
                <ResourceDictionary Source="Resources/GrayTheme.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>

    <Window.CommandBindings>
        <CommandBinding Command="ApplicationCommands.Undo"
                    Executed="UndoCommandHandler"
                    CanExecute="UndoCanExecute"                       
                    />
        <CommandBinding Command="ApplicationCommands.Redo"
                    Executed="RedoCommandHandler"
                    CanExecute="RedoCanExecute"                       
                    />
       
        <CommandBinding Command="ApplicationCommands.Close"
                    Executed="ExitCommandHandler"
                    CanExecute="AlwaysTrue"
                    />
    
        <CommandBinding Command="ApplicationCommands.Help"
                    Executed="HelpCommandHandler"
                    CanExecute="AlwaysTrue"
                    />
         <CommandBinding Command="NavigationCommands.DecreaseZoom"
                    Executed="ZoomoutCommandHandler"
                    CanExecute="AlwaysTrue"
                    />
        <CommandBinding Command="NavigationCommands.IncreaseZoom"
                    Executed="ZoominCommandHandler"
                    CanExecute="AlwaysTrue"
                    />
 
        <CommandBinding Command="{x:Static custom:MainWindow.CommentCommand}" 
                    Executed="CommentCommandHandler" 
                    CanExecute="AlwaysTrue" />
        <CommandBinding Command="{x:Static custom:MainWindow.UnCommentCommand}" 
                    Executed="UnCommentCommandHandler" 
                    CanExecute="AlwaysTrue" />
   
         <CommandBinding Command="{x:Static custom:MainWindow.ShowPdfCommand}" 
                    Executed="ShowPdfHandler" 
                    CanExecute="AlwaysTrue" />
        <CommandBinding Command="{x:Static custom:MainWindow.OpenPgfManualCommand}" 
                    Executed="OpenPgfManualHandler" 
                    CanExecute="AlwaysTrue" />
    </Window.CommandBindings>
    <Window.InputBindings>
        <KeyBinding Command="{x:Static custom:MainWindow.CommentCommand}" Key="T" Modifiers="Ctrl"/>
        <KeyBinding Command="{x:Static custom:MainWindow.UnCommentCommand}" Key="T" Modifiers="Ctrl+Shift"/>
        <KeyBinding Command="NavigationCommands.Search" Key="F3"/>
        <KeyBinding Command="NavigationCommands.Search" CommandParameter="notnull" Key="F3" Modifiers="Shift"/>
     <!--   <KeyBinding Command="{x:Static custom:MainWindow.ShowCodeCompletionsCommand}" Key="SPACE"  Modifiers="Ctrl"/> -->
        <KeyBinding Command="{Binding TheDocument.CompileCommand, Converter={StaticResource TERCRCC}}" Key="F5"/>
        <KeyBinding Command="{x:Static custom:MainWindow.ShowPdfCommand}" Key="F6"/>
        <KeyBinding Command="{Binding TheDocument.SavePdfCommand, Converter={StaticResource TERCRCC}}" Key="S" Modifiers="Ctrl+Shift"/>
        <KeyBinding Command="{x:Static custom:MainWindow.OpenPgfManualCommand}" Key="F2"/>
    
    </Window.InputBindings>
    <Grid>
            <Grid.RowDefinitions>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="*"></RowDefinition>
            <RowDefinition Height="0"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
        </Grid.RowDefinitions>
        <Menu Height="23"  Name="menu1"  Grid.Row="0" BorderThickness="0" >
            <MenuItem Header="_File" >
                <MenuItem Header="Open..." Command="ApplicationCommands.Open" />
                <MenuItem Header="New" Command="ApplicationCommands.New" />
                <MenuItem Header="Open in new instance..." Command="ApplicationCommands.Open" CommandParameter="true"/>
                <MenuItem Header="New in new instance..." Command="ApplicationCommands.New" CommandParameter="true"/>
                <MenuItem Header="Save" Command="ApplicationCommands.Save" />
                <MenuItem Header="Save As..."  Command="ApplicationCommands.SaveAs" />
                <Separator/>
                <MenuItem Header="Save Pdf" Command="{Binding TheDocument.SavePdfCommand, Converter={StaticResource TERCRCC}}" InputGestureText="Ctrl+Shift+S"/>
                <MenuItem Header="Save Pdf As..." Command="{Binding TheDocument.SavePdfCommand, Converter={StaticResource TERCRCC}}" CommandParameter="notnull"/>
                <MenuItem Header="Export File As..." Command="{Binding TheDocument.ExportFileCommand, Converter={StaticResource TERCRCC}}"/>
                <common:RecentFileList x:Name="RecentFileList" />                
                <MenuItem Header="Quit" Command="ApplicationCommands.Close"  />
            </MenuItem>
            <MenuItem Header="_Edit" >
                <MenuItem Header="Undo" Command="ApplicationCommands.Undo"/>
                <MenuItem Header="Redo" Command="ApplicationCommands.Redo"/>
                <Separator/>
                <MenuItem Header="Copy" Command="ApplicationCommands.Copy"/>
                <MenuItem Header="Paste" Command="ApplicationCommands.Paste"/>
                <MenuItem Header="Cut" Command="ApplicationCommands.Cut"/> 
                <MenuItem Header="Copy all with Figure environment" Click="CopyAllWithFigureEnvironment_Click"/>
                <Separator/>
                <MenuItem Header="Find..."  Command="ApplicationCommands.Find"/>
                <MenuItem Header="Replace..."  Command="ApplicationCommands.Replace"/>
                <MenuItem Header="Find Next"  Command="NavigationCommands.Search" InputGestureText="F3"/>
                <Separator/>
                <MenuItem Header="Comment" Command="{x:Static custom:MainWindow.CommentCommand}" InputGestureText="Ctrl+D"/>
                <MenuItem Header="Uncomment" Command="{x:Static custom:MainWindow.UnCommentCommand}" InputGestureText="Ctrl+Shift+D"/>
            </MenuItem>
            <MenuItem Header="_View">
                <MenuItem Header="Show Pdf in external viewer" Command="{x:Static custom:MainWindow.ShowPdfCommand}" InputGestureText="F6"/>
                <Separator/>
                <MenuItem Header="WYSIWYG Mode" IsCheckable="True" IsChecked="{Binding EditorMode, Converter={StaticResource EnumToBool},ConverterParameter={x:Static myVM:TEMode.Wysiwyg}}"/>
                <MenuItem Header="Preview Mode" IsCheckable="True" IsChecked="{Binding EditorMode, Converter={StaticResource EnumToBool},ConverterParameter={x:Static myVM:TEMode.Preview}}"/>
                <MenuItem Header="Production Mode" IsCheckable="True" IsChecked="{Binding EditorMode, Converter={StaticResource EnumToBool},ConverterParameter={x:Static myVM:TEMode.Production}}"/>
                <MenuItem Header="Toolbars">
                    <MenuItem Header="Main" IsChecked="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowFiles, Mode=TwoWay}" IsCheckable="True" />
                    <MenuItem Header="Zoom" IsChecked="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowZoom, Mode=TwoWay}" IsCheckable="True" />
                    <MenuItem Header="WYSIWYG Tools" IsChecked="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowTools, Mode=TwoWay}" IsCheckable="True"/>
                    <MenuItem Header="Other Tools" IsChecked="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowToolsOther, Mode=TwoWay}" IsCheckable="True"/>
                        <!-- <MenuItem Header="Bounding Box" IsChecked="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowBB, Mode=TwoWay}" IsCheckable="True"/> -->
                    <MenuItem Header="Mode" IsChecked="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowMode, Mode=TwoWay}" IsCheckable="True"/>
                    <MenuItem Header="Grid" IsChecked="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowGrid, Mode=TwoWay}" IsCheckable="True"/>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="_Compilation">
                <MenuItem Header="Compile" Command="{Binding TheDocument.CompileCommand, Converter={StaticResource TERCRCC}}" InputGestureText="F5"/>
                <MenuItem Name="mnuAbort" Header="Abort" Click="AbortCompilationClick"
                          IsEnabled="{Binding Source={x:Static myApp:TheCompiler.Instance}, Path=Compiling, Mode=OneWay}"/>
                <MenuItem Name="mnuAbortSnippet" Header="Abort current snippet compilation" Click="AbortSnippetCompilationClick"
                          IsEnabled="{Binding Source={x:Static myApp:TikzToBMPFactory.Instance}, Path=Compiling, Mode=OneWay}"/>
                <MenuItem Name="mnuAutoCompile" Header="Auto compilation on text change" IsChecked="{Binding AutoCompileOnDocumentChange, Mode=TwoWay}" IsCheckable="True"/>
                <Separator/>
                <MenuItem Header="(Re-)Generate precompiled headers" Click="GenerateHeadersClick"/>
                <MenuItem Header="Compile snippet thumbnails..." Click="GenerateSnippetThumbsClick"/>
            </MenuItem>
            <MenuItem Header="_Settings">
                <MenuItem Header="Snippet Manager..." Click="SnippetMenuClick"/>
                <MenuItem Header="Settings..." Click="SettingsMenuClick"/>
                 <!-- <MenuItem Header="Test..." Click="TestClick"/>
               <MenuItem Header="Test...Updatetexts" Click="TestUpdClick"/>
                <MenuItem Header="Test...Error Listview" Click="Test2Click"/> -->
                <Separator/>
                <MenuItem Header="Try to install missing Latex packages" Click="InstallLatexPackages_Click"/>
            </MenuItem>
            <MenuItem Header="?">
                <MenuItem Header="Help..." Command="ApplicationCommands.Help"/>
                <MenuItem Header="Open PGF manual..." Command="{x:Static custom:MainWindow.OpenPgfManualCommand}" InputGestureText="F2"/>
                <MenuItem Header="Quick Tour..." Click="QuickTour_Click"/>
                <MenuItem Header="Show Tips&amp;Tricks" Click="ShowTipsTricks_Click"/>
                <MenuItem Header="Check for updates..." Click="CheckForUpdates_Click"/>
                <MenuItem Header="About..." Click="AboutClick"/>
            </MenuItem>
        </Menu>
        <ToolBarTray Grid.Row="1"  ToolTipService.ShowDuration="15000" >
            <ToolBar  Height="28" Name="tlbMain"  Band="{Binding Source={x:Static p:Settings.Default}, Path=TLB_FilesBand, Mode=TwoWay}"
                      Visibility="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowFiles, Converter={StaticResource boolToVis}}">
                <Button Command="ApplicationCommands.New" ToolTip="New file">
                    <Image Source="/TikzEdt;component/Images/DocumentHS.png" Stretch="Fill" Height="16" Width="16" />
                </Button>
                <Button Command="ApplicationCommands.New" CommandParameter="true" ToolTip="Create a new file in a new Instance of TikzEdt">
                    <Image Source="/TikzEdt;component/Images/newinnew2.png" Stretch="Fill" Height="16" Width="16"/>
                </Button>
                <Button Command="ApplicationCommands.Open"  ToolTip="Open file" >
                    <Image Source="/TikzEdt;component/Images/openfolderHS.png"  Stretch="Fill" Height="16" Width="16"/>
                </Button>
                <Button Command="ApplicationCommands.Open" CommandParameter="true" ToolTip="Open a file in a new Instance of TikzEdt">
                    <Image Source="/TikzEdt;component/Images/openinnew.png"  Stretch="Fill" Height="16" Width="16"/>
                </Button>
                <Button Command="ApplicationCommands.Save"  ToolTip="Save file">
                    <Image Source="/TikzEdt;component/Images/saveHS.png"  Stretch="Fill" Height="16" Width="16" />
                </Button>
                <Button Command="{Binding TheDocument.SavePdfCommand, Converter={StaticResource TERCRCC}}"  ToolTip="Save Pdf">
                    <Image Source="/TikzEdt;component/Images/savePdf.png"  Stretch="Fill" Height="16" Width="16" />
                </Button>
                <Separator/>
                <Button Command="ApplicationCommands.Paste"  ToolTip="Paste">
                    <myC:AutoGrayImage Source2="/TikzEdt;component/Images/PasteHS.png"  Stretch="Fill" Height="16" Width="16"/>
                </Button>
                <Button Command="ApplicationCommands.Copy" ToolTip="Copy">
                    <myC:AutoGrayImage Source2="/TikzEdt;component/Images/CopyHS.png"  Stretch="Fill" Height="16" Width="16"/>
                </Button>
                <Button Command="ApplicationCommands.Cut" ToolTip="Cut">
                    <myC:AutoGrayImage Source2="/TikzEdt;component/Images/CutHS.png"  Stretch="Fill" Height="16" Width="16"  />
                </Button>
                <Separator/>
                <Button Command="{Binding TheDocument.CompileCommand, Converter={StaticResource TERCRCC}}">
                    <Image Source="/TikzEdt;component/Images/PlayHS.png"  Stretch="Fill" Height="16" Width="16"/>
                    <Button.ToolTip>
                        Compile the file (F5)
                    </Button.ToolTip>
                </Button>
                <Button Name="cmdAbortCompilation" Click="AbortCompilationClick" ToolTipService.ShowOnDisabled="True"
                        IsEnabled="{Binding Source={x:Static myApp:TheCompiler.Instance}, Path=Compiling, Mode=OneWay}">
                    <myC:AutoGrayImage Source2="/TikzEdt;component/Images/error.png" Stretch="Fill" Height="16" Width="16" />
                    <Button.ToolTip>Abort compilation in case something goes wrong</Button.ToolTip>
                </Button>
                <Separator/>
                <CheckBox HorizontalAlignment="Center" IsChecked="{Binding ShowOverlay}" IsEnabled="{Binding EditorMode, Converter={StaticResource EnumToBool},ConverterParameter={x:Static myVM:TEMode.Wysiwyg}}"
                           Name="chkOverlay" >
                    Overlay
                    <CheckBox.ToolTip>Switch the overlay displaying on top of the preview on/off</CheckBox.ToolTip>
                </CheckBox>
            </ToolBar>
            <ToolBar Name="tlbZoom" Band="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ZoomBand, Mode=TwoWay}"
                     Visibility="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowZoom, Converter={StaticResource boolToVis}}" ToolTipService.ShowDuration="15000">
                <Button Click="cmdZoomOutClick" ToolTip="Zoom out" >
                    <Image Source="/TikzEdt;component/Images/ZoomOutHS.png"  Stretch="Fill" Height="16" Width="16"/>
                </Button>
                <ComboBox Name="cmbZoom"  Width="60" ItemsSource="{Binding}" Text="{Binding TheDocument.Resolution,Converter={StaticResource ZoomResConverter}}" SelectedIndex="3" IsEditable="True">
                    <ComboBoxItem Content="10%" />
                    <ComboBoxItem Content="50%" />
                    <ComboBoxItem Content="75%" />
                    <ComboBoxItem Content="100%" />
                    <ComboBoxItem Content="150%" />
                    <ComboBoxItem Content="200%" />
                    <ComboBoxItem Content="300%" />
                    <ComboBoxItem Content="500%" />
                    <ComboBoxItem Content="700%" />
                    <ComboBoxItem Content="1000%" />
                    <ComboBoxItem Content="1500%" />
                    <ComboBoxItem Content="2000%" />
                </ComboBox>
                <Button Click="cmdZoomInClick" ToolTip="Zoom in">
                    <Image Source="/TikzEdt;component/Images/ZoomInHS.png"  Stretch="Fill" Height="16" Width="16"/>
                </Button>
               </ToolBar>
            <ToolBar Height="28" Name="tlbGrid" Band="{Binding Source={x:Static p:Settings.Default}, Path=TLB_GridBand, Mode=TwoWay}"
                     Visibility="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowGrid, Converter={StaticResource boolToVis}}">
                <TextBlock VerticalAlignment="Center" Margin="0 0 3 0" MouseLeftButtonDown="TextBlock_MouseLeftButtonDown_1">Grid:</TextBlock>
                <ComboBox Name="cmbGrid"  Width="40" ItemsSource="{Binding}" SelectedIndex="4" IsEditable="True"
                          Text="{Binding RasterWidth}" ToolTip="Sets the grid spacing. Tip: ALT turns off the grid temporarily, ALT+SHIFT halves the grid spacing.">
                    <ComboBoxItem Content="0" />
                    <ComboBoxItem Content="0.1" />
                    <ComboBoxItem Content="0.2" />
                    <ComboBoxItem Content="0.5" />
                    <ComboBoxItem Content="1"/>
                    <ComboBoxItem Content="2"/>
                    <ComboBoxItem Content="5"/>
                </ComboBox>
                <TextBlock Margin="3 0 3 0" VerticalAlignment="Center" ToolTip="The number of coordinate lines of constant angular parameter shown in polar coordinate mode">RS:</TextBlock>
                <TextBox Width ="30" Name="txtRadialSteps" Text="{Binding RasterSteps}" />                
                <TextBlock Margin="3 0 3 0" VerticalAlignment="Center" ToolTip="The offset (in degrees) of the first coordinate line of constant angular parameter shown in polar coordinate mode">RO:</TextBlock>
                <TextBox Width ="30" Name="txtRadialOffset" Text="{Binding RasterRadialOffset}"  />
                <!-- <extToolkit:NumericUpDown Increment="1" Maximum="360" Minimum="-360" Width="50"/>
                <CheckBox IsChecked="{Binding ElementName=rasterControl1}">
                    0
                </CheckBox>
                <CheckBox>
                    1/2
                </CheckBox> -->
            </ToolBar>
            <ToolBar  Band="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ModeBand, Mode=TwoWay}" Height="28" Name="tlbMode"
                      Visibility="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowMode, Converter={StaticResource boolToVis}}">
                <ToolBar.Resources>
                    <Style TargetType="{x:Type RadioButton}" x:Key="flatbstyle"  BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}" >
                    </Style>
                </ToolBar.Resources>
                <TextBlock Margin="3 0 3 0" VerticalAlignment="Center">Mode:</TextBlock>
                <RadioButton Name="chkFancyMode"
                             Style="{StaticResource flatbstyle}" Focusable="False"
                             ToolTipService.InitialShowDelay="0" ToolTipService.ShowDuration="20000"
                             IsChecked="{Binding EditorMode, Converter={StaticResource EnumToBool},ConverterParameter={x:Static myVM:TEMode.Wysiwyg}}">
                    <DockPanel>
                        <Image Source="/TikzEdt;component/Images/base_star_32.png" Height="16" Width="16" Stretch="Fill"></Image>
                        <TextBlock>Wysiwyg</TextBlock>
                    </DockPanel>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Wysiwyg Mode" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                In this mode, the parser and the overlay are turned on.
                                There is also some command smuggled into the source code to determine
                                the transformation from Tikz to Screen coordinates.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <RadioButton Name="chkStandardMode" Style="{StaticResource flatbstyle}" Focusable="False"
                             ToolTipService.InitialShowDelay="0" ToolTipService.ShowDuration="20000"
                             IsChecked="{Binding EditorMode, Converter={StaticResource EnumToBool},ConverterParameter={x:Static myVM:TEMode.Preview}}">
                    <DockPanel>
                        <!-- <Image Source="/TikzEdt;component/Images/base_star_32.png"></Image>-->
                        <TextBlock>Preview</TextBlock>
                    </DockPanel>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Preview Mode" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                In this mode, the parser and the overlay are turned off.
                                The document is rendered as it is. Hence TikzEdt becomes 
                                a pure text editor with Preview. Use this mode if you have
                                problems with Wysiwyg mode (speed/stability).
                                Note that the Picture displayed on the right is a temporary 
                                pdf file stored in the tex-file's directory. If you want to
                                produce the final pdf, choose Production Mode.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <RadioButton Name="chkProductionMode" Style="{StaticResource flatbstyle}"  Focusable="False"
                             ToolTipService.InitialShowDelay="0" ToolTipService.ShowDuration="20000"
                             IsChecked="{Binding EditorMode, Converter={StaticResource EnumToBool},ConverterParameter={x:Static myVM:TEMode.Production}}">
                    <DockPanel>
                        <!-- <Image Source="/TikzEdt;component/Images/base_star_32.png"></Image>-->
                        <TextBlock>Production</TextBlock>
                    </DockPanel>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Production Mode" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                This mode is the same as Preview Mode, except that 
                                (i) the picture displayed on the right is the final 
                                pdf output (file yourtexfile.pdf)
                                (ii) there is no auto-compilation, you have to hit compile 
                                to save and compile the source. (This is to avoid automatic
                                saving of changes to the source file.)
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
            </ToolBar>
            <ToolBar Name="tlbTools"  Height="28" 
                     Visibility="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowTools, Converter={StaticResource boolToVis}}" 
                     Band="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ToolsBand, Mode=TwoWay}" ToolTipService.ShowDuration="15000">
                <RadioButton HorizontalAlignment="Left" Name="rbToolMove" VerticalAlignment="Top"
                             IsChecked="{Binding CurrentTool, Converter={StaticResource EnumToBool},ConverterParameter={x:Static myApp:OverlayToolType.move}}">
                    <myC:AutoGrayImage Source2="/TikzEdt;component/Images/base_cursor.png" Stretch="Fill" Height="16" Width="16"/>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Select and move tool" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                Use this tool to select and move things. The coordinate raster is automatically adjusted to the 
                                coordinate system (Polar/Cartesian) at the object moved. Coordinate transformations are respected.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <RadioButton HorizontalAlignment="Left" Name="rbToolAddVert" VerticalAlignment="Top" 
                             IsChecked="{Binding CurrentTool, Converter={StaticResource EnumToBool},ConverterParameter={x:Static myApp:OverlayToolType.addvert}}">
                    <myC:AutoGrayImage Source2="/TikzEdt;component/Images/bmpvert.png"  Stretch="Fill" Height="16" Width="16"/>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Node tool" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                A simple tool to create nodes. Choose the style you want to apply in the "Node style" dropdown on the right.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <RadioButton HorizontalAlignment="Left" Name="rbToolAddEdge" VerticalAlignment="Top"
                             IsChecked="{Binding CurrentTool, Converter={StaticResource EnumToBool},ConverterParameter={x:Static myApp:OverlayToolType.addedge}}">
                    <Image Source="/TikzEdt;component/Images/edge.png"  Stretch="Fill" Height="16" Width="16"/>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Edge tool" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                Connect things by edges. If the things are unnamed nodes, unique node names are inserted. If the things are coordinates, a node tag is inserted.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <RadioButton HorizontalAlignment="Left" Name="rbToolAddPath" VerticalAlignment="Top" 
                             IsChecked="{Binding CurrentTool, Converter={StaticResource EnumToBool},ConverterParameter={x:Static myApp:OverlayToolType.addpath}}">
                    <Image Source="/TikzEdt;component/Images/path.png"  Stretch="Fill" Height="16" Width="16"/>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Path tool" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                Create a path of straight lines. To close the path, double click when you want to close. If you don't want to close the path, use right button to stop drawnig. Use CTRL to draw nodes w/o drawing edges.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <RadioButton HorizontalAlignment="Left" Name="rbToolSmooth" VerticalAlignment="Top" 
                             IsChecked="{Binding CurrentTool, Converter={StaticResource EnumToBool},ConverterParameter={x:Static myApp:OverlayToolType.smooth}}">
                    <Image Source="/TikzEdt;component/Images/Smooth.png"  Stretch="Fill" Height="16" Width="16"/>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Smooth curve tool" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                Draw a smooth curve. Doubleclick closes the curve. Right click to not close the curve.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <RadioButton HorizontalAlignment="Left" Name="rbToolBezier" VerticalAlignment="Top"
                             IsChecked="{Binding CurrentTool, Converter={StaticResource EnumToBool},ConverterParameter={x:Static myApp:OverlayToolType.bezier}}">
                    <Image Source="/TikzEdt;component/Images/Bezier.png"  Stretch="Fill" Height="16" Width="16"/>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Bezier tool" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                Creates an path of Bezier curves.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <RadioButton HorizontalAlignment="Left" Name="rbToolRectangle" VerticalAlignment="Top" 
                             IsChecked="{Binding CurrentTool, Converter={StaticResource EnumToBool},ConverterParameter={x:Static myApp:OverlayToolType.rectangle}}">
                    <Image Source="/TikzEdt;component/Images/Rectangle.png" Stretch="Fill" Height="16" Width="16"/>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Rectangle tool" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                Creates a rectangle. Press CTRL for square.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <RadioButton HorizontalAlignment="Left" Name="rbToolEllipse" VerticalAlignment="Top" 
                             IsChecked="{Binding CurrentTool, Converter={StaticResource EnumToBool},ConverterParameter={x:Static myApp:OverlayToolType.ellipse}}">
                    <Image Source="/TikzEdt;component/Images/Ellipse.png" Stretch="Fill" Height="16" Width="16"/>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Ellipse tool" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                Creates an ellipse. Press CTRL for circle.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <RadioButton HorizontalAlignment="Left" Name="rbToolArc" VerticalAlignment="Top" 
                             IsChecked="{Binding CurrentTool, Converter={StaticResource EnumToBool},ConverterParameter={x:Static myApp:OverlayToolType.arc}}">
                    <Image Source="/TikzEdt;component/Images/arc.png" Stretch="Fill" Height="16" Width="16"/>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Arc/Pie tool" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                Creates an arc. Press CTRL to create a pie segment instead. SHIFT switches between the larger and smaller arc segments.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <RadioButton HorizontalAlignment="Left" Name="rbToolArcEdit" VerticalAlignment="Top" Visibility="Visible"
                             IsChecked="{Binding CurrentTool, Converter={StaticResource EnumToBool},ConverterParameter={x:Static myApp:OverlayToolType.arcedit}}">
                    <Image Source="/TikzEdt;component/Images/arcedit.png"  Stretch="Fill" Height="16" Width="16"/>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Arc/Pie editing tool" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                Sometimes the usual Move tool will not do what you want with arcs/pies.
                                This tool is a bit more clever.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <RadioButton HorizontalAlignment="Left" Name="rbToolGrid" VerticalAlignment="Top" 
                             IsChecked="{Binding CurrentTool, Converter={StaticResource EnumToBool},ConverterParameter={x:Static myApp:OverlayToolType.grid}}">
                    <Image Source="/TikzEdt;component/Images/Grid.png" Stretch="Fill" Height="16" Width="16"/>
                    <RadioButton.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Grid tool" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                Draws a grid. The grid spacing should be edited in the code.
                            </TextBlock>
                        </StackPanel>
                    </RadioButton.ToolTip>
                </RadioButton>
                <TextBlock Margin="3 0 3 0" VerticalAlignment="Center">
                    Node style:
                    <TextBlock.ToolTip>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                The node style is automatically applied to nodes drawn with one of the WYSIWYG tools on the left.
                                You can choose an existing style, type your own or copy a style from the snippet list.
                            </TextBlock>
                    </TextBlock.ToolTip>
                </TextBlock>
                <ComboBox Name="cmbNodeStyles" Width="150" IsEditable="True" ItemsPanel="{DynamicResource Virtualized}"
                          Text="{Binding TheDocument.NodeStyle}" ItemsSource="{Binding TheDocument.TikzStyles}" BorderThickness="0" BorderBrush="Black"/>
                <Button Name="cmdClearNStyle" Click="cmdClear_Click" ToolTip="Clear Node Style"
                        IsEnabled="{Binding ElementName=cmbNodeStyles, Path=Text, Converter={StaticResource compareConverter}, ConverterParameter=''}">
                    <myC:AutoGrayImage Source2="/TikzEdt;component/Images/BuilderDialog_remove.png" />
                </Button>
                <TextBlock Margin="3 0 3 0" VerticalAlignment="Center">Edge style:
                     <TextBlock.ToolTip>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                The edge style is automatically applied to edges drawn with one of the WYSIWYG tools on the left.
                                You can choose an existing style, type your own or copy a style from the snippet list.
                            </TextBlock>
                    </TextBlock.ToolTip>
                </TextBlock>
                <ComboBox Name="cmbEdgeStyles" Width="150" IsEditable="True" ItemsPanel="{DynamicResource Virtualized}"
                          Text="{Binding TheDocument.EdgeStyle}" ItemsSource="{Binding TheDocument.TikzStyles}"/>
                <Button Name="cmdClearEStyle" Click="cmdClear_Click" ToolTip="Clear Edge Style" 
                        IsEnabled="{Binding ElementName=cmbEdgeStyles, Path=Text, Converter={StaticResource compareConverter}, ConverterParameter=''}">
                    <myC:AutoGrayImage Source2="/TikzEdt;component/Images/BuilderDialog_remove.png" />
                </Button>
                <Separator/>
                <ToggleButton ToolTip="Use Polar coordinates for newly placed nodes" Name="chkPolar">
                    <Image Source="/TikzEdt;component/Images/radial.png" />
                </ToggleButton>
                <ComboBox Name="cmbModifier" Width="45" IsEditable="False">
                    <ComboBox.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Determines whether to use absolute or relative coordinates for newly placed nodes." />
                            <TextBlock Text="empty: absolute coordinates" />
                            <TextBlock Text="+: relative,not changing current point"/>
                            <TextBlock Text="++: relative, changing current point" />
                        </StackPanel>
                    </ComboBox.ToolTip>
                        <ComboBoxItem Content="" />
                    <ComboBoxItem Content="+" />
                    <ComboBoxItem Content="++" />
                </ComboBox>
            </ToolBar>
            <ToolBar Band="{Binding Source={x:Static p:Settings.Default}, Path=TLB_OtherToolsBand, Mode=TwoWay}"
                     Visibility="{Binding Source={x:Static p:Settings.Default}, Path=TLB_ShowToolsOther, Converter={StaticResource boolToVis}}" ToolTipService.ShowDuration="15000">
                <ToolBar.ToolTip>
                    <StackPanel>
                        <TextBlock Text="Create color definition" FontWeight="Bold"></TextBlock>
                        <TextBlock Width="200" TextWrapping="Wrap">
                                Note: Use [draw=COLORNAME] to use color.
                        </TextBlock>
                    </StackPanel>
                </ToolBar.ToolTip>
                <CustomWPFColorPicker:ColorPickerControlView x:Name="ColorPicker1"  Height="16" Width="16" />
                <Button HorizontalAlignment="Left" Name="bColorPicker1Insert" VerticalAlignment="Top" Visibility="Visible" 
                        Click="ColorPicker1_OnInsert" ToolTipService.ShowDuration="15000">
                    <Image Source="/TikzEdt;component/Images/colorinsert.png"  Stretch="Fill" Height="16" Width="16"/>
                    <Button.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Create color definition" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                First choose a color using the color picker. Then press this button to create a new color definition. It is insert right before the TikZ picture.                                
                            </TextBlock>
                        </StackPanel>
                    </Button.ToolTip>
                </Button>
                <Separator />
                <Button Click="UniquefyNames_Click">
                    <Image Source="/TikzEdt;component/Images/uniquefynames2.png"  Stretch="Fill" Height="16" Width="16" />
                    <Button.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Unique-ify node names" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                Scans for duplicate node names. Changes nodenames (e.g. from foo to foo_1, foo_2 etc) so as to make them unique. Also updates all references to the named nodes.
                            </TextBlock>
                        </StackPanel>
                    </Button.ToolTip>
                </Button>
          <!--       <Button Click="InsertMatrix_Click">
                    <Image Source="/TikzEdt;component/Images/matrix.png"  Stretch="Fill" Height="16" Width="16" />
                    <Button.ToolTip>
                        <StackPanel>
                            <TextBlock Text="Insert Matrix" FontWeight="Bold"></TextBlock>
                            <TextBlock Width="200" TextWrapping="Wrap">
                                Displays a dialog to insert a TikZ matrix.
                            </TextBlock>
                        </StackPanel>
                    </Button.ToolTip>
                </Button> -->
            </ToolBar>
            
        </ToolBarTray>
        <DockPanel Grid.Row="2" Name="MainElements" LastChildFill="True">
        
            <StackPanel DockPanel.Dock="Left">
                <ToggleButton Width="60" Name="cmdFiles" IsChecked="{Binding Source={x:Static p:Settings.Default}, Path=LeftToolsColSelectedIndex, Mode=TwoWay, Converter={StaticResource IndexToBool}, ConverterParameter=0 }" 
                              Focusable="False">
                    <ToggleButton.LayoutTransform>
                        <RotateTransform Angle="-90"/>
                    </ToggleButton.LayoutTransform>
                    Files
                </ToggleButton>
                <ToggleButton Width="60" Name="cmdSnippets" IsChecked="{Binding Source={x:Static p:Settings.Default}, Path=LeftToolsColSelectedIndex, Mode=TwoWay, Converter={StaticResource IndexToBool}, ConverterParameter=1 }"
                              Focusable="False"  >
                    <ToggleButton.LayoutTransform>
                        <RotateTransform Angle="-90"/>
                    </ToggleButton.LayoutTransform>
                    Snippets
                </ToggleButton>
                <ToggleButton Width="60" Name="cmdDynPreamble" IsChecked="{Binding Source={x:Static p:Settings.Default}, Path=LeftToolsColSelectedIndex, Mode=TwoWay, Converter={StaticResource IndexToBool}, ConverterParameter=2 }"
                              Focusable="False"  >
                    <ToggleButton.LayoutTransform>
                        <RotateTransform Angle="-90"/>
                    </ToggleButton.LayoutTransform>
                    Preamble
                </ToggleButton>
            </StackPanel>            

            <!-- <GridSplitter Background="Gray" Grid.Column="2" Grid.Row="0" Height="Auto" Width="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />-->
            <Grid Width="{Binding Path=LeftToolsColWidthSetting, Source={x:Static p:Settings.Default}, Mode=TwoWay}"                   
                  Visibility="{Binding Path=LeftToolsColSelectedIndex, Source={x:Static p:Settings.Default},Converter={StaticResource GEQZeroToVisibility}}">
            <mySnippets:SnippetList x:Name="snippetlist1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" 
                                    Grid.Column="1" Grid.Row="0" OnInsert="snippetlist1_OnInsert" 
                                    ShowThumbnails="{Binding Source={x:Static p:Settings.Default}, Path=Snippets_ShowThumbs, Mode=TwoWay}" 
                                    Visibility="{Binding ElementName=cmdSnippets, Path=IsChecked, Converter={StaticResource boolToVis}}"
                                    OnUseStyles="snippetlist1_OnUseStyles"/>
       
                <FLV:FolderView x:Name="folderView" Grid.Column="1" Grid.Row="0"
                            Visibility="{Binding ElementName=cmdFiles, Path=IsChecked, Converter={StaticResource boolToVis}}"
                            Filter="*.tex;*.tikz|*.tex|*.tikz|*.*" FilterIndex="0" OnFileOpen="folderView_OnFileOpen"
                            RecentLocations="{Binding ElementName=RecentFileList,Path=BindableRecentFiles}"
                            ShowHidden="{Binding FolderView_ShowHidden, Source={x:Static p:Settings.Default}}"
                            >
                     <FLV:FolderView.ListViewContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Open" FontWeight="Bold" Command="{x:Static FLV:FListView.OpenCommand}"/>
                            <MenuItem Header="Open in new instance" Command="{x:Static FLV:FListView.OpenFileCommand}" CommandParameter="newinstance"/>
                            <MenuItem Header="Open in external viewer" Command="{x:Static FLV:FListView.OpenFileCommand}" CommandParameter="externalviewer"/>
                            <Separator />
                            <MenuItem Header="Jump to working directory" Click="JumpToCurrentFolder_Click"/>
                            <Separator/>
                            <MenuItem Header="View in Explorer" Click="OpenInExplorer_Click"/>                            
                        </ContextMenu>
                    </FLV:FolderView.ListViewContextMenu> 
                </FLV:FolderView>
                <myDynPreamble:DynPreambleView x:Name="preambleView" PreamblesFile="{x:Static myApp:Consts.DynPreamblesFileFullPath}"
                                         Grid.Column="1" Grid.Row="0" Visibility="{Binding ElementName=cmdDynPreamble, Path=IsChecked, Converter={StaticResource boolToVis}}"
                                         />
            </Grid>
            <myC:DockPanelSplitter DockPanel.Dock="Left" Thickness="5" Background="Gainsboro"
                                   Visibility="{Binding Path=LeftToolsColSelectedIndex, Source={x:Static p:Settings.Default},Converter={StaticResource GEQZeroToVisibility}}"/>
            <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" DockPanel.Dock="Right" Name="PreviewScrollViewer" 
                          Width="{Binding OverlayCanvasCol2WidthSetting, Source={x:Static p:Settings.Default}, Mode=TwoWay}" 
                          MouseDown="PreviewScrollViewer_MouseDown" MouseUp="PreviewScrollViewer_MouseUp" MouseMove="PreviewScrollViewer_MouseMove">
                <!-- 
                <Button Grid.Row="0" Grid.Column="0">Hallo Welt</Button> <my:PdfOverlay  HorizontalAlignment="Stretch" x:Name="pdfOverlay1" VerticalAlignment="Stretch" Grid.Row="0" Grid.Column="0" />
                -->
                <Grid Background="#303030" MouseWheel="Preview_MouseWheel">
                    <my:RasterControl HorizontalAlignment="Center" x:Name="rasterControl1" Grid.Row="0" Width="200" Height="200" Grid.Column="0" VerticalAlignment="Center"                                       
                                      Resolution="{Binding TheDocument.Resolution}"
                                      Visibility="{Binding EditorMode, Converter={StaticResource EnumToVis}, ConverterParameter={x:Static myVM:TEMode.Wysiwyg}}"
                                      ShowRaster="{Binding ShowOverlay}" RasterWidth="{Binding RasterWidth}" RasterRadialSteps="{Binding RasterSteps}"
                                      RadialOffset="{Binding RasterRadialOffset}"
                                      BB="{Binding TheDocument.CurrentBB}" />
                    <my:TikzDisplay HorizontalAlignment="Center" x:Name="tikzDisplay1" 
                                    RenderTransparent="{Binding EditorMode, Converter={StaticResource EnumToBool}, ConverterParameter={x:Static myVM:TEMode.Wysiwyg}}"
                                    PdfPath="{Binding TheDocument.PdfPath}" Resolution="{Binding TheDocument.Resolution}"
                                    VerticalAlignment="Center" Grid.Row="0" Grid.Column="0"                                  
                                    ReloadPdf="{Binding TheDocument.ReloadPdf}"/>
                    <my:PdfOverlay  HorizontalAlignment="Center" x:Name="pdfOverlay1" VerticalAlignment="Center" Width="200" Height="200" Grid.Row="0" Grid.Column="0"  
                                    MouseMove="pdfOverlay1_MouseMove"
                                    NodeStyle="{Binding TheDocument.NodeStyle}" EdgeStyle="{Binding TheDocument.EdgeStyle}"                                                                          
                                    JumpToSource="pdfOverlay1_JumpToSource" ReplaceText="pdfOverlay1_ReplaceText"
                                    Resolution="{Binding TheDocument.Resolution}"
                                    NewNodeModifier="{Binding ElementName=cmbModifier, Path=Text}"
                                    UsePolarCoordinates="{Binding ElementName=chkPolar, Path=IsChecked}"                                    
                                    Tool="{Binding CurrentTool, Mode=TwoWay}"
                                    ParseTree="{Binding TheDocument.ParseTree}" BB="{Binding TheDocument.CurrentBB}"
                                    AllowEditing="{Binding TheDocument.AllowEditing}">
                        <my:PdfOverlay.Visibility>
                            <MultiBinding Converter="{StaticResource EnumBoolToVis}" ConverterParameter="{x:Static myVM:TEMode.Wysiwyg}">
                                <Binding Path="EditorMode" />
                                <Binding Path="ShowOverlay" />
                            </MultiBinding>
                        </my:PdfOverlay.Visibility>
                    </my:PdfOverlay>
                    <!-- NodeStyle="{Binding ElementName=cmbNodeStyles, Path=Text,Mode=OneWay}" EdgeStyle="{Binding ElementName=cmbEdgeStyles, Path=Text, Mode=OneWay}"
                                    Visibility="{Binding ElementName=chkFancyMode, Path=IsChecked, Converter={StaticResource boolToVis}}" -->
                </Grid>
            </ScrollViewer>
            <myC:DockPanelSplitter DockPanel.Dock="Right" Thickness="5" Background="Gainsboro"/>
            <DockPanel LastChildFill="True" >
            <!--<Grid>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition Height="3"/>
                    <RowDefinition Height="{Binding StatusFieldRowHeightSetting, Source={x:Static p:Settings.Default}, Mode=TwoWay}" Name="StatusFieldRow" />
                </Grid.RowDefinitions>
                <GridSplitter Background="Gray" Grid.Row="1" Height="Auto" Width="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" /> -->
                <DockPanel LastChildFill="true" DockPanel.Dock="Bottom" Height="{Binding StatusFieldRowHeightSetting, Source={x:Static p:Settings.Default}, Mode=TwoWay}" >
                    <StackPanel DockPanel.Dock="Left" >
                        <RadioButton Name="chkStatus" Focusable="False" 
                                      IsChecked="True" Style="{StaticResource {x:Type ToggleButton}}" Background="Gainsboro">
                            <RadioButton.LayoutTransform>
                                <RotateTransform Angle="-90"/>
                            </RadioButton.LayoutTransform>
                            <TextBlock Text="Stat" />
                        </RadioButton>
                        <RadioButton Name="chkFullTex" Focusable="False" Style="{StaticResource {x:Type ToggleButton}}" Background="Gainsboro">
                            <RadioButton.LayoutTransform>
                                <RotateTransform Angle="-90"/>
                            </RadioButton.LayoutTransform>
                            <TextBlock Text="Tex"/>
                        </RadioButton>
                        <RadioButton Name="chkErrorTex" Focusable="False" Style="{StaticResource {x:Type ToggleButton}}" Background="Gainsboro" >
                            <RadioButton.LayoutTransform>
                                <RotateTransform Angle="-90"/>
                            </RadioButton.LayoutTransform>
                            <TextBlock Text="Err"/>
                        </RadioButton>
                    </StackPanel>
                    <Grid>
                        <RichTextBox  HorizontalAlignment="Stretch"  Name="txtStatus" VerticalAlignment="Stretch" IsReadOnly="True" VerticalScrollBarVisibility="Auto" 
                                      Visibility="{Binding ElementName=chkStatus, Path=IsChecked, Converter={StaticResource boolToVis}}"
                                      IsDocumentEnabled="True"/>
                        <RichTextBox  HorizontalAlignment="Stretch"  Name="txtTexout" VerticalAlignment="Stretch" IsReadOnly="True" VerticalScrollBarVisibility="Auto" 
                                      Visibility="{Binding ElementName=chkFullTex, Path=IsChecked, Converter={StaticResource boolToVis}}"
                                      IsDocumentEnabled="True"/>
                      <!--  <TextBox Name="textBox" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" IsReadOnly="True" VerticalScrollBarVisibility="Auto" 
                                      Visibility="{Binding ElementName=chkErrorTex, Path=IsChecked, Converter={StaticResource boolToVis}}"/> -->
                        <ListView Name="lstErrors" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                  IsSynchronizedWithCurrentItem="True"
                                  Visibility="{Binding ElementName=chkErrorTex, Path=IsChecked, Converter={StaticResource boolToVis}}" 
                                  MouseDoubleClick="lstErrors_MouseDoubleClick"
                                  ItemsSource="{Binding Source={StaticResource TexErrorsSource}}">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="" Width="Auto">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <Grid>
                                                    <Image Source="{Binding Path=severity, Converter={StaticResource SeverityToImg}}" Width="16" Height="16"/>
                                                    <TextBlock Text="P" Visibility="{Binding IsFromParser, Converter={StaticResource boolToVis}}" Width="16" FontSize="11" FontFamily="Arial" FontWeight="ExtraBold"
                                                               TextAlignment="Right" VerticalAlignment="Bottom" Margin="0 0 -5 -5"/>
                                                </Grid>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn DisplayMemberBinding="{Binding Path=Message}" Header="Message" Width="{Binding MessageColWidth, Source={x:Static p:Settings.Default}, Mode=TwoWay}"/>
                                    <GridViewColumn DisplayMemberBinding="{Binding Path=Line}" Header="line" Width="{Binding LineColWidth, Source={x:Static p:Settings.Default}, Mode=TwoWay}" />
                                    <GridViewColumn DisplayMemberBinding="{Binding Path=Pos}" Header="pos" Width="{Binding PosColWidth, Source={x:Static p:Settings.Default}, Mode=TwoWay}" />
                                    <GridViewColumn DisplayMemberBinding="{Binding Path=SourceFileName}" Header="src" Width="{Binding SourceColWidth, Source={x:Static p:Settings.Default}, Mode=TwoWay}" />
                                </GridView>
                            </ListView.View>

                        </ListView>

                    </Grid>
                </DockPanel>
                <myC:DockPanelSplitter DockPanel.Dock="Bottom" Thickness="5" Background="Gainsboro"/>
                <myEditor:TextEditorEx HorizontalAlignment="Stretch" x:Name="txtCode" VerticalAlignment="Stretch" 
                                       ShowLineNumbers="{Binding Source={x:Static p:Settings.Default}, Path=Editor_ShowLineNumbers}"
                                       WordWrap="{Binding Source={x:Static p:Settings.Default}, Path=Editor_WordWrap}" Drop="txtCode_Drop" DragEnter="txtCode_DragEnter"
                                       ContextMenuOpening="txtCodeContextMenu_ContextMenuOpening"
                                       HDFile="{x:Static myApp:Consts.SyntaxFileFullPath}"
                                       CompletionsFile="{x:Static myApp:Consts.CompletionsFileFullPath}"
                                       EnableCodeCompletion="{Binding Source={x:Static p:Settings.Default}, Path=Editor_CodeCompletion}"
                                       Document2="{Binding TheDocument.Document.Document, Mode=OneWay}"
                                       CompleteBegins="{Binding Source={x:Static p:Settings.Default}, Path=Editor_CompleteBegins}"                                       
                                       DynamicSnippets="{Binding TheDocument.TikzStyles}"
                                       DynamicSnippetsEnv="1"
                                       FontFamily ="{Binding Source={x:Static p:Settings.Default}, Path=Editor_FontFamily}"
                                       FontSize="{Binding Source={x:Static p:Settings.Default}, Path=Editor_FontSize}"
                                       MinWidth="20"
                                       Grid.Row="0"> <!-- ID=1 is currently the options environment  -->
                    <myEditor:TextEditorEx.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Copy" Command="ApplicationCommands.Copy"/>
                            <MenuItem Header="Cut" Command="ApplicationCommands.Cut"/>
                            <MenuItem Header="Paste" Command="ApplicationCommands.Paste"/>
                            <Separator />
                            <MenuItem Header="Comment" Command="{x:Static custom:MainWindow.CommentCommand}" InputGestureText="Ctrl+T"/>
                            <MenuItem Header="Uncomment" Command="{x:Static custom:MainWindow.UnCommentCommand}" InputGestureText="Ctrl+Shift+T"/>
                            <MenuItem Header="En-Scope" Click="Enscope_Click"/>
                            <Separator/>
                            <MenuItem Header="Mark item in Overlay (if possible)" Click="MarkAtOffsetClick" />
                        </ContextMenu>
                    </myEditor:TextEditorEx.ContextMenu>
                </myEditor:TextEditorEx>
            </DockPanel>

            <!-- </Grid> <GridSplitter Background="Gray" Grid.Column="4" Grid.Row="0" Height="Auto" Width="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />-->
       
        </DockPanel>
        
        <StatusBar Grid.Row="4" Height="23" HorizontalAlignment="Stretch" Name="statusBar1" VerticalAlignment="Top">
            <StatusBarItem>
                <TextBlock Name="textCompileInfo" Width="Auto"/>
            </StatusBarItem>
            <StatusBarItem>
                <ProgressBar Name="progressCompile" Visibility="Collapsed" Width="80" Height="10" IsIndeterminate="False" />
            </StatusBarItem>


            <StatusBarItem Name="CoordinateStatusBarItem" Content="(0,0)" DockPanel.Dock="Right" HorizontalAlignment="Right" 
                           HorizontalContentAlignment="Right" MinWidth="60" FontSize="11"/>
            <Separator DockPanel.Dock="Right"/>
            <StatusBarItem Name="StatusBarZoom" DockPanel.Dock="Right" HorizontalAlignment="Right" >
                <StackPanel Orientation="Horizontal">
                    <Button Command="{x:Static Slider.DecreaseLarge}" CommandTarget="{Binding ElementName=ZoomSlider}" ToolTip="Zoom out" Style="{StaticResource FlatButtonStyle}">
                        <Image Source="/TikzEdt;component/Images/ZoomOutHSSmall.png"  Stretch="UniformToFill" Height="11" Width="11"/>
                    </Button>
                    <Slider Name="ZoomSlider" Value="{Binding TheDocument.Resolution, Mode=TwoWay}" Width="120" Minimum="5" Maximum="200"
                             TickPlacement="TopLeft" VerticalAlignment="Top" LargeChange="5">
                        <Slider.LayoutTransform>
                            <ScaleTransform ScaleX=".7" ScaleY=".7"/>                            
                        </Slider.LayoutTransform>                        
                    </Slider>
                    <Button Command="{x:Static Slider.IncreaseLarge}" CommandTarget="{Binding ElementName=ZoomSlider}" ToolTip="Zoom in" Style="{StaticResource FlatButtonStyle}">
                        <Image Source="/TikzEdt;component/Images/ZoomInHSSmall.png"  Stretch="UniformToFill" Height="11" Width="11"/>
                    </Button>
                    <ComboBox Name="cmbZoom2"  Width="60" ItemsSource="{Binding}" Text="{Binding TheDocument.Resolution,Converter={StaticResource ZoomResConverter}}" 
                          FontSize="9" SelectedIndex="3" IsEditable="True">
                    <ComboBoxItem Content="10%" />
                    <ComboBoxItem Content="50%" />
                    <ComboBoxItem Content="75%" />
                    <ComboBoxItem Content="100%" />
                    <ComboBoxItem Content="150%" />
                    <ComboBoxItem Content="200%" />
                    <ComboBoxItem Content="300%" />
                    <ComboBoxItem Content="500%" />
                    <ComboBoxItem Content="700%" />
                    <ComboBoxItem Content="1000%" />
                    <ComboBoxItem Content="1500%" />
                    <ComboBoxItem Content="2000%" />
                </ComboBox>                    
                </StackPanel>
            </StatusBarItem>

            <StatusBarItem Name="StatusBarGrid" DockPanel.Dock="Right" HorizontalAlignment="Right" >
                <StackPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Margin="0 0 3 0" FontSize="11" MouseLeftButtonDown="TextBlock_MouseLeftButtonDown_1">Grid:</TextBlock>
                    <ComboBox Name="cmbGrid2"  Width="40" ItemsSource="{Binding}" SelectedIndex="3" IsEditable="True" FontSize="9"
                          Text="{Binding RasterWidth}" ToolTip="Sets the grid spacing. Tip: ALT turns off the grid temporarily, ALT+SHIFT halves the grid spacing.">
                        <ComboBoxItem Content="0" />
                        <ComboBoxItem Content="0.1" />
                        <ComboBoxItem Content="0.2" />
                        <ComboBoxItem Content="0.5" />
                        <ComboBoxItem Content="1"/>
                        <ComboBoxItem Content="2"/>
                        <ComboBoxItem Content="5"/>
                    </ComboBox>
                    <TextBlock Margin="3 0 3 0" VerticalAlignment="Center" FontSize="11" ToolTip="The number of coordinate lines of constant angular parameter shown in polar coordinate mode">RS:</TextBlock>
                    <TextBox Width ="30" Name="txtRadialSteps2" Text="{Binding RasterSteps}" FontSize="9" />
                    <TextBlock Margin="3 0 3 0" FontSize="11" VerticalAlignment="Center" ToolTip="The offset (in degrees) of the first coordinate line of constant angular parameter shown in polar coordinate mode">RO:</TextBlock>
                    <TextBox Width ="30" Name="txtRadialOffset2" Text="{Binding RasterRadialOffset}"  FontSize="9" />
                </StackPanel>
            </StatusBarItem>

            
            <Separator DockPanel.Dock="Right"/>
            <StatusBarItem Name="StandAloneStatusBarItem" Content="[Document is standalone]" DockPanel.Dock="Right" HorizontalAlignment="Right" 
                           Visibility="{Binding TheDocument.IsStandAlone, Converter={StaticResource boolToVis}}" FontSize="11"/>
            <StatusBarItem Content="{Binding TheDocument.CurrentBB, Converter={StaticResource RectToString}}" DockPanel.Dock="Right" HorizontalAlignment="Right" Margin="0 0 10 0" FontSize="10"/>
            <StatusBarItem Name="BBStatusBarItem" Content="Bounding Box:" DockPanel.Dock="Right" HorizontalAlignment="Right" FontSize="11"/>

            
        </StatusBar>
    </Grid>
</Window>
